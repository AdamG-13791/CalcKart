;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                Mario Kart TI                ;
;                    v0.1                     ;
;                2022 April 21                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Assembly Programing by Crazy_Fox2      ;
;   Mode 7 Perspective Designed by Circuit10  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.nolist
#include "ti83plus.inc"
.list
.org $4000

versionId	.equ	$01		; v0.1


; Added instructions {

.addinstr	SLI (HL)    36CB 2 NOP 1
.addinstr	SLI (IX*)   CBDD 4 ZIX 1 3600
.addinstr	SLI (IY*)   CBFD 4 ZIX 1 3600
.addinstr	SLI A       37CB 2 NOP 1
.addinstr	SLI B       30CB 2 NOP 1
.addinstr	SLI C       31CB 2 NOP 1
.addinstr	SLI D       32CB 2 NOP 1
.addinstr	SLI E       33CB 2 NOP 1
.addinstr	SLI H       34CB 2 NOP 1
.addinstr	SLI L       35CB 2 NOP 1

.addinstr	LD BC,BC	4049 2 NOP 1
.addinstr	LD DE,BC	5059 2 NOP 1
.addinstr	LD HL,BC	6069 2 NOP 1

.addinstr	LD BC,DE	424B 2 NOP 1
.addinstr	LD DE,DE	525B 2 NOP 1
.addinstr	LD HL,DE	626B 2 NOP 1

.addinstr	LD BC,HL	444D 2 NOP 1
.addinstr	LD DE,HL	545D 2 NOP 1
.addinstr	LD HL,HL	646D 2 NOP 1

.addinstr	SUB A,A	97 1 NOP 1
.addinstr	SUB A,B	90 1 NOP 1
.addinstr	SUB A,C	91 1 NOP 1
.addinstr	SUB A,D	92 1 NOP 1
.addinstr	SUB A,E	93 1 NOP 1
.addinstr	SUB A,H	94 1 NOP 1
.addinstr	SUB A,L	95 1 NOP 1
.addinstr	SUB A,(HL) 96 1 NOP 1

; }


floorScrn_width	.equ	$40
physicsFPS		.equ	15


; Variable Definitions {

; appData: $8000
; $100 bytes
; Used by the OS as scratch memory for the boot code

drawFloor_putPxl_ram	.equ	$8000	; $80 bytes, part of the 3d rendering code copied to RAM. May change later

; ramCode: $8100
; $130 bytes
; Used by the OS for storing bits of code to be run from RAM
; {
debug_saveNumPhysicsLoops	.equ	$8100
; }

; MD5Temp: $8259
; $10 bytes
; Used by the OS for temperary data storage during MD5 calculations

; MD5Length: $8269
; $8 bytes
; Used by the OS to store the number of incoming bits for MD5 calculations

; MD5Hash: $8292
; $10 bytes
; Used by the OS to store the final result of the MD5 calculation

; tempSwapArea: $82A5
; $1C3 bytes
; Used by the OS for temperary data storage during Flash ROM loading
; Overlaps with MD5Buffer below
; $100 bytes before it starts sharing with MD5Buffer
; {

; Sprite buffer: $100 bytes, 16 bytes per sprite, 16 3d sprites on screen max
spriteBuffer	.equ	$82A5
sprBuff_segSize	.equ	$10		; Sprite buffer is filled up starting from the end to make use of push/pop optimizations

sprBuff_xPos	.equ	$0E
sprBuff_yPos	.equ	$0F

sprBuff_scaleX_lo .equ	$0C
sprBuff_scaleX_hi .equ	$0D

sprBuff_scaleY_lo .equ	$0A
sprBuff_scaleY_hi .equ	$0B

sprBuff_xOff	.equ	$08
sprBuff_yOff	.equ	$09

sprBuff_width	.equ	$06		; Base width
sprBuff_height	.equ	$07		; Base height

sprBuff_depth	.equ	$04		; Depth, lower numbers are drawn first
sprBuff_flip	.equ	$05		; Also includes page number

sprBuff_sprLo	.equ	$02
sprBuff_sprHi	.equ	$03

; }


; MD5Buffer: $83A5
; $40 bytes
; Used by the OS for MD5 calculations
; Used by this program to store the minimap and temperary variables
; {

minimap		.equ	$83A5	; 32 bytes to store the mimi-map (16x16 pixels)
temp		.equ	$83C5	; 32 bytes to store miscilaneous data for when the registers arn't enough

; }

; IFont_record: $845A
; $7 bytes
; Used by the OS to store a bitmap of the cursor

; OP1-OP6: $8478
; $42 bytes
; Used by the OS to store misc Strings
; Used by this program to store audio data or link data
; {
; }

; textShadow: $8508
; $80 bytes
; Used by the OS as a backup of the text on the current screen
; {

spSave		.equ	$8508
calcType	.equ	$850A
basePage	.equ	$850B

clipTop		.equ	$850C		; Top clip position for scaled sprites
clipBottom	.equ	$850D		; Bottom clip position for scaled sprites
clipLeft	.equ	$850E		; Left clip position for scaled sprites
clipRight	.equ	$850F		; RIght clip position for scaled sprites
keys		.equ	$8510
heldKeys	.equ	$8510		; Held keys
releasedKeys .equ	$8517		; Released keys
pressedKeys	.equ	$851E		; Pressed keys
scrn_foviateBound .equ	$8525	; Boundary for foviation of 3d floor, should be set to 4 for no foviation
scrn_resScale	.equ	$8526	; Resolution for 3d floor, 1 is full resolution, 2 is half resolution, etc.
globalTimerLoLo	.equ	$8527
globalTimerLoHi	.equ	$8528
globalTimerHiLo	.equ	$8529
globalTimerHiHi	.equ	$852A
numPhysicsFrames .equ	$852B	; Number of physics frames to run though before next draw

curPhysicsInput	.equ	$852C	; Current physics input keys, 8 bits for all the control keys

frameInputBuff	.equ	$852D	; Buffer for inputs for next physics frames. 8 physics frames per draw frame tops for now

cam_xPos	.equ	$853E
cam_yPos	.equ	$8540
cam_ang		.equ	$8542
spriteBuffer_pos	.equ	$8543	; Sprite buffer position
spriteBuffer_num	.equ	$8545	; Number of sprites on the sprite buffer
intSubFrameCounter	.equ	$8546	; Interrupt subframe counter


; }


; header: $8674
; $17 bytes
; Used by the OS for the linking protocall



; saveSScreen: $86EC
; $300 bytes
; Used by the OS to save the contents of the screen on power-down
; {


numTrackPacks	.equ	$86EC


; Car Data: $110 bytes, $10 bytes per car, $10 extra for the player car, 8 karts
carData		.equ	$8700
car_char	.equ	$00
car_flags	.equ	$01
car_xPos	.equ	$02
car_xPosLo	.equ	$02
car_xPosHi	.equ	$03
car_yPos	.equ	$04
car_yPosLo	.equ	$04
car_yPosHi	.equ	$05
car_zPos	.equ	$06
car_zPosHi	.equ	$06
car_radius	.equ	$07		; High nibble determins hitbox height, Low nibble determins hitbox radius
car_xVel	.equ	$08
car_xVelLo	.equ	$08
car_xVelHi	.equ	$09
car_yVel	.equ	$0A
car_yVelLo	.equ	$0A
car_yVelHi	.equ	$0B
car_zVel	.equ	$0C
car_state	.equ	$0D
car_checkID	.equ	$0E
car_ang		.equ	$0F

; The following are only for the player kart
car_angVel	.equ	$10
car_ang_sub	.equ	$11
car_subPos	.equ	$12
car_xPosSub	.equ	$12
car_yPosSub	.equ	$13
car_item	.equ	$14
car_zPosLo	.equ	$15



; Entity Data: $180 bytes, 12 bytes per object, 32 objects (not counting racers)
entData		.equ	$8810
ent_id		.equ	$00
ent_flags	.equ	$01
ent_xPos	.equ	$02
ent_yPos	.equ	$04
ent_zPos	.equ	$06
ent_radius	.equ	$07		; High nibble determins hitbox height, Low nibble determins hitbox radius
ent_p0		.equ	$08
ent_p1		.equ	$09
ent_p2		.equ	$0A
ent_p3		.equ	$0B




; }

; statVars: $8A3A
; $213 bytes
; Used by the OS to store statistics related things
; {

intCode_RAM	.equ	$8A8A	; Location of the interupt, should disable interupts if this page gets swapped out
intTable	.equ	$8B00	; Interupt table, 257 bytes of a repeating value because im 2 is broken

; }

; cmdShadow: $966E
; $80 bytes
; Used by the OS as a backup of the text on the home screen
; {

trackPackList	.equ	$966E

; }

; apperr1/apperr2: $984D
; $1A (?) bytes
; Used by the OS to store cusom error messages

; appBackUpScreen: $9876
; $300 bytes
; Completely unused by TI-OS

replayData	.equ	$9876



; Data from $C000-$FFFF
; On older calculators we use an unused RAM page
; On newer calculators we use the mathprint RAM page, being careful not to overwrite OS data
; On Ti-83+ non-silver eddition, this maps to the user RAM, so we must check that this is free RAM before running.

checkpoint	.equ	$C080	; AI & Checkpoint data
buffer		.equ	$C100	; Misc. buffer
background	.equ	$C200	; Background image
something	.equ	$C700	; Reserved, not sure what to use this for
graphics	.equ	$C800	; Decompressed tileset graphics
tilemap		.equ	$D000	; Decompressed track tilemap


; Constants



; }


debugOn:
pageOne:
	.db $80,$0F, 0,0,0,0	;This is the master field, 0x800
	.db $80,$12, $01,$04	;signing key ID. This is $01,$05 for the 84+CSE
	.db $80,$48, "MKartTI "	;last nibble is the length
	.db $80,$81, 3			;num pages
	.db $80,$90				;disable splash
	.db $03,$22,$09,$00		;null date stamp
	.db $02,$00				;null date stamp signature
	.db $80,$70				;final field
	
	jp startApp
	
	; Jump Table
_drawFloor		.equ	$-4000h
	.dw drawFloor
	.db 1
	
startApp:
	
; Initialization {
	
	di
	
	; Wait for ENTER to be released
	ld a, %11111101
	out ($01), a
	ld b, 0
	ex (sp), hl
	ex (sp), hl
	djnz $-2
	in a, ($01)
	and %00000001
	jr z, startApp
	
	; Set default values
	ld hl, saveSScreen
	ld de, saveSScreen+1
	ld (hl), 0
	ld bc, $02FF
	ldir
	
	; Get base app page
	in a, ($06)
	ld (basePage), a
	
	; Set CPU Speed
	ld a, $01
	out ($20), a
	
	; Set LCD Direction
	ld a, $05
	out ($10), a
	
	; Check if 83+ BE
	in a, ($02)
	rlca
	jr nc, init_83
	
	; Set default audio output value
	xor a
	ld (audio_curWaveAmp), a
	
	; Set $C000-$FFFF page mapping
	ld a, $82
	out ($05), a
	
	; Save data stored in lower portion of RAM page
	ld hl, $C000
	ld de, $E000
	ld bc, $1F00
	ldir
	
	; Setup audio timers and data
	call audio_init
	
	; Disable hardware timers
	ld a, %00001001
	out ($03), a
	
	; Set calcType value to 1
	ld a, $01
	; Location of the 83+SE & 84+ interrupt
	ld hl, intRoutine_se
	
	jr init_83Done
	
init_83:
	; Check if we have enough Free RAM to run
	ld a, (FPS+1)
	rlca
	rlca
	jp c, endPrgm_noRAM
	ld a, (OPS+1)
	cp $E0
	jp c, endPrgm_noRAM
	
	; Set hardware timer 1, 59*2 fps
ti83_intMask	.equ	%00001011	; Linkport, HW Timer 1, ON Button
	ld a, ti83_intMask
	out ($03), a
	ld a, %00000110
	out ($04), a
	
	; Set calcType value to 0
	xor a
	; Location of 83+ interrupt
	ld hl, intRoutine_83
	
init_83Done:
	
	; Save Calculator Type
	ld (calcType), a
	; Save SP
	ld (spSave), sp
	
	; Init interupt counter
	ld a, $04
	ld (intSubFrameCounter), a
	
	im 2
	; Setup Interupt code
	ld de, intCode_RAM
	ld bc, $0100	; 256 bytes seems like enough memory for the interupt routine
	ldir
	; Setup Interupt table
	ld hl, intTable
	ld de, intTable+1
	ld (hl), intCode_RAM/256
	ld bc, $0100	; 257 byte long table (first byte is already put before the ldir)
	ldir
	ld a, intTable/256
	ld i, a
	
	; Zero-out image buffer
	ld hl, plotSScreen
	ld (hl), 0
	ld de, plotSScreen+1
	ld bc, $02FF
	ldir
	
	ld ix, track_marioCircuit2
	call loadMap
	call removeCoins
	
	
	ld b, $00
	call setup3dOobCode
	
	; Play song
	ld hl, mario_left
	ld de, mario_right
	ld a, (basePage)
	dec a
	call audio_mus_start
	
; }
	
; Main Game Loop {
	
	; Set default kart values
	ld a, $C0
	ld (carData+car_ang), a
	ld hl, 14720
	ld (carData+car_xPos), hl
	ld hl, 6656
	ld (carData+car_yPos), hl
	; Screen resolution settings
	ld hl, $0202
	ld (scrn_foviateBound), hl
	
mainLoop:
	
	ei
	
	; Reset sprite buffer pos
	ld hl, spriteBuffer+$100
	ld (spriteBuffer_pos), hl
	xor a
	ld (spriteBuffer_num), a
	
	; Get number of physics frames to loop through
	ld hl, numPhysicsFrames
	; If there are no physics frames to go through, loop until new frame
newPhysicsFrameWait:
	ld a, (hl)
	or a
	jr z, newPhysicsFrameWait
	ld (hl), 0
	ld (debug_saveNumPhysicsLoops), a
	
	ld b, a
	call getFrameInput
	
physicsFrameLoop:	; {
	
	push bc
	
	; Increment Global Timer
	scf
	ld de, $0000
	ld hl, (globalTimerLoLo)
	adc hl, de
	ld (globalTimerLoLo), hl
	ld hl, (globalTimerHiLo)
	adc hl, de
	ld (globalTimerHiLo), hl
	
	; Change foviate maybe
	ld a, (heldKeys+6)
	ld hl, (scrn_foviateBound)
	rrca
	jr c, $+5
	ld hl, $0404
	rrca
	jr c, $+5
	ld hl, $0402
	rrca
	jr c, $+5
	ld hl, $0204
	rrca
	jr c, $+5
	ld hl, $0202
	rrca
	jr c, $+5
	ld hl, $0104
	ld (scrn_foviateBound), hl
	
	; Change oob tiling maybe
	ld a, (heldKeys+1)
	rlca
	ld b, 0
	rlca
	call nc, setup3dOobCode
	inc b
	rlca
	call nc, setup3dOobCode
	inc b
	rlca
	call nc, setup3dOobCode
	
	
	; Move the car around
	call moveCar
	
	; Set camera angle
	ld a, (carData+car_ang)
	; Set camera position
	; camX = carX/32 - cos(ang)/16
	; get cos(ang)/16
	ld (cam_ang), a
	add a, $80	; Small optimization, doing this is the same as negating the result of cosine, meaning we can add instead of subtract. In the end this saves one cycle (hooray...)
	push af
	call trig_cos
	ld d, h
	ld e, l
	add hl, de
	add hl, de
	; get carX/32
	ld de, (carData+car_xPos)
	add hl, de
	ld b, $05
	call shiftHL_right
	ld (cam_xPos), hl
	; camY = carY/32 - sin(ang)/16
	; get sin(ang)/16
	pop af
	call trig_sin
	ld d, h
	ld e, l
	add hl, de
	add hl, de
	; get carY/32
	ld de, (carData+car_yPos)
	add hl, de
	ld b, $05
	call shiftHL_right
	ld (cam_yPos), hl
	
	
	
	; Perform entity step code {
	ld hl, entData
	ld b, $20
entStep_loop:
	ld a, (hl)	; Load object id
	push bc
	push hl
	push hl
	pop ix
	; Get pointer to object data
	call getObjDataPointer
	inc hl
	inc hl
	; Run step code
	call hlJump_indirect
	pop hl
	ld bc, $000C
	add hl, bc
	pop bc
	
	djnz entStep_loop
	
;	}
	
	ld a, $05
	out ($10), a
	
	; Animate tiles
	ld hl, tileAni
	call animateTiles
	
	
	; Loop through physics frames
	;pop hl
	pop bc
	dec b
	jp nz, physicsFrameLoop
	
; }
	
	; Test Create Entity
	ld a, (pressedKeys+3)
	or a
	jr z, noTestCreateEnt
	xor a
	ld (temp+6), a
	ld a, $01
	ld hl, (buffer+car_xPos)
	ld (temp+2), hl
	ld hl, (buffer+car_yPos)
	ld (temp+4), hl
	call createEntity
noTestCreateEnt:
	
	
	b_call(_drawFloor)
	
	
	ld hl, $4000
	ld (clipTop), hl
	ld hl, $5010
	ld (clipLeft), hl
	
	
	; Draw Background
	ld ix, plotSScreen+(2*64)
	ld a, (cam_ang)
	; Get data pointer for background data
	ld hl, background
	ld e, a
	ld c, a
	ld d, 0
	srl e \ srl e \ srl e
	and %00000111
	jr nz, $+3
	dec de
	add hl, de
	; Get Sub-Tile Offset
	ld a, c
	dec a
	and %00000111
	inc a
	; Shift left
	ld c, a
	ld b, $20
drawBG_shiftLeft_screenLoop:
	push ix
	push bc
	push hl
	ld e, $08
drawBG_shiftLeft_rowLoop:
	ld a, (hl)
	inc hl
	ld d, (hl)
	ld b, c
	sla d
	rla
	djnz $-3
	ld (ix), a
	push de
	ld de, $0040
	add ix, de
	pop de
	dec e
	jr nz, drawBG_shiftLeft_rowLoop
	pop hl
	ld bc, $0028
	add hl, bc
	pop bc
	pop ix
	inc ix
	djnz drawBG_shiftLeft_screenLoop
	
	
	; Perform entity draw code {
	ld hl, entData
	ld b, $20
entDraw_loop:
	ld a, (hl)	; Load object id
	push bc
	push hl
	push hl
	pop ix
	; Get pointer to object data
	call getObjDataPointer
	ld bc, $0006
	add hl, bc
	; Run step code
	call hlJump_indirect
	pop hl
	ld bc, $000C
	add hl, bc
	pop bc
	
	djnz entDraw_loop
	
;	}
	
	; Draw car
	ld hl, $00C0
	ld (temp+10), hl
	ld (temp+12), hl
	ld ix, carData
	ld bc, $8002
	ld a, $08
	ld hl, marioSprite
	call drawSprite3d_entity
	
	
	call drawSpritesInBuffer
	
	
	; Put debug stuff on screen
	ld de, plotSScreen
	ld hl, debugRamLocs
putDebugInfo_loop:
	ld c, (hl)
	inc hl
	ld b, (hl)
	inc hl
	ld a, c
	or b
	jr z, putDebugInfo_end
	ld a, (bc)
	ld (de), a
	inc de
	jr putDebugInfo_loop
putDebugInfo_end:
	
	
	
	; Draw Screen
	ld hl, plotSScreen
	ld d, $20
	ld e, $0C
	ld c, $10
drawScreen_loop:
	ld a, $80
	in f, (c)
	jp m, $-2
	out ($10), a
	in f, (c)
	jp m, $-2
	out (c), d
	inc d
	ld b, $40
drawScreen_rowLoop:
	ld a, (hl)
	inc hl
	in f, (c)
	jp m, $-2
	out ($11), a
	djnz drawScreen_rowLoop
	dec e
	jr nz, drawScreen_loop
	
	
	jp mainLoop
	
; }

debugRamLocs:
	.dw carData+car_ang
	.dw doubleZero
	.dw carData+car_xVelLo
	.dw carData+car_xVelHi
	.dw carData+car_yVelLo
	.dw carData+car_yVelHi
	.dw doubleZero
	.dw debug_saveNumPhysicsLoops
doubleZero:
	.dw $0000
	
	
	
	
; Object Functions {
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          Create Entity          ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Creates a new entity
; Inputs:
;	a: object id
;	(temp+2): xPos
;	(temp+4): yPos
;	(temp+6): zPos
;	(temp+8) - (temp+11): p0-p1 
; Outputs:
;	a: 0 if failure, importance if success
;	iy: pointer to new object
; Destoys:
;	de, hl
createEntity:	; {
	push bc
	ld (temp), a
	; Get object initial values
	call getObjDataPointer
	; Get initial object flags and hitbox and save for later
	ld a, (hl)	; Flags
	ld (temp+1), a
	and %11000000
	push af
	inc hl
	ld a, (hl)	; Radius (hitbox)
	ld (temp+7), a
	
	; Find least important entity
	push af
	ld bc, $20C0
	ld hl, entData+1-12
	ld de, $000C
createEnt_searchLoop:
	add hl, de
	; Get compared entity's importance
	ld a, (hl)
	and %11000000
	; Check if less important
	cp c
	jr z, createEnt_searchLoop_newImp
	jr nc, createEnt_searchLoop_noNewImp
createEnt_searchLoop_newImp:
	; Save current target slot importance and pointer
	ld c, a
	pop af
	push hl
createEnt_searchLoop_noNewImp:
	djnz createEnt_searchLoop
	
	; Check if creating entity is greater than or equal to importance of found slot
	pop de
	push de
	pop iy
	pop af
	cp c
	jr c, createEnt_failed	; Found slot is greater
	; Special case if found slot is important
	; Means the whole entity table is full of important objects
	; Jump to error handler
	ld a, c
	cp $C0
	ld hl, temp
	jr z, createEnt_error
	; Copy variables to new entity
	dec de
	ld c, $0C	; b is already 0
	ldir
	jr $+3
createEnt_failed:
	xor a
	pop bc
	ret
createEnt_error:
	ld a, (hl)
	ld (temp+12), a
	ld a, $02
	jp errorMsg
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Get Object Data Pointer      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Gets the pointer to object constructor data gevin the id
; Inputs:
;	a: object id
; Outputs:
;	hl: pointer
; Destroys:
;	a, de
getObjDataPointer	; {
	ld hl, objectData
	ld d, $00
	rlca \ rl d
	rlca \ rl d
	rlca \ rl d
	and %11111000
	ld e, a
	add hl, de
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        Apply Deadzone        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Applies a deadzone to hl, zeroing it if within a specified range
; Inputs:
;	hl: value to deadzone
;	bc: zeroing range
; Outputs:
;	hl: value
;	zFlag: reset if deadzone applied
; Destroys:
;	a
deadzoneHL:		; {
	call deadzoneHLDE_HL
	ret z
	ld hl, $0000
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        Apply Deadzone        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Applies a deadzone to hl and de, zeroing them when both
;	are within the specified range
; Inputs:
;	hl: value to deadzone
;	de: value to deadzone
;	bc: zeroing range
; Outputs:
;	hl: value
;	de: value
; Destroys:
;	a
deadzoneHLDE:		; {
	; Check hl
	call deadzoneHLDE_HL
	ret z
	; Check de
	ex de, hl
	call deadzoneHLDE_HL
	ex de, hl
	ret z
	
	; Apply deadzone
	ld hl, $0000
	ld d, h
	ld e, l
	
	ret
	
deadzoneHLDE_HL:
	push hl
	bit 7, h
	jr z, deadzoneHLDE_HL_pos
	; Make positive
	sub a
	sub l
	ld l, a
	sbc a, a
	sub h
	ld h, a
deadzoneHLDE_HL_pos:
	; Check bounds
	or a
	sbc hl, bc
	bit 7, h
	pop hl
	ret
; }
	
	
; }
	
	
#include draw.z80
	
	
animateTiles_pop:
	pop hl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        Animate Tiles        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Animates scrolling/alternating tiles
; Inputs:
;	hl: pointer to tile animation data
;	Each animation is made of 3 bytes:
;	1) The index of the tile to animate (Tile $FF cannot be animated)
;	2) The frequency the animation will occur, this is a mask applied
;		to the timer, animation will occur when the result is 0
;	3) The animation to perform, bit 7 determins if the tile is scrolling or alternating
;	If 1, then bits 0-2 will dictate the x scroll, and bits 4-6 will dictate the y scroll (bit 3 is unused)
;	If 0, then bits 0-6 will determine what the new tile to become will be (Note: this means that only the first 128 tiles will alternate correctly)
;	After all animations are listed a value of $FF will terminate the list
; Outputs:
;	None
; Destroys:
;	a, bc, de, hl
animateTiles:	; {
	; Get tile to animate
	ld e, (hl)
	inc hl
	; Return if $FF
	inc e
	ret z
	dec e
	; Get frame mask and check if changing this frame
	ld a, (globalTimerLoLo)
	and (hl)
	inc hl
	ld c, (hl)
	inc hl
	jr nz, animateTiles
	; Check if scrolling tile or alternating tile
	bit 7, c
	jr z, animateTiles_altTile
	; Scroll tile
	; Get pointer to tile graphics (tile*8+graphics)
	ld a, (graphics / 256) / 8
	sla e \ rla
	sla e \ rla
	sla e \ rla
	ld d, a
	; Animate in the x direction
	push hl
	ex de, hl
	ld a, c
	and %00000111
	jr z, animateTiles_yScroll
	ld d, a
	ld a, $08
	ld e, l
animateTiles_xScroll_loop:
	ld b, d
animateTiles_xScroll_scrollLoop:
	rrc (hl)
	djnz animateTiles_xScroll_scrollLoop
	inc hl
	dec a
	jr nz, animateTiles_xScroll_loop
animateTiles_yScroll:
	ld l, e
	; Animate in y direction
	ld a, c
	rrca \ rrca \ rrca \ rrca
	and %00000111
	jr z, animateTiles_pop
	; Get tile strip destination pointer (graphicsPtr + yOff)
	ld b, $00
	ld c, a
	ld d, h
	ld e, l
	add hl, bc
	; Shift data
	; Counter until destination pointer wraps arround = 8 - yOff
	ld a, $08
	sub c
	ld c, a
	ld b, a
animateTiles_yScroll_loop:
	ldi
	ld a, c
	or a
	jr nz, animateTiles_yScroll_noPtrWrap
	; Wrap around destination pointer
	ld c, $08
	ld a, e
	sub c
	ld e, a
animateTiles_yScroll_noPtrWrap:
	djnz animateTiles_yScroll_loop
	jr animateTiles_pop
animateTiles_altTile:
	; Iterate through tilemap and replace all tiles
	ld a, e
	push hl
	ld hl, tilemap
	ld d, c
	ld bc, 64*64
animateTiles_altTile_loop:
	; Iterate throught tilemap until find right tile
	cpir
	jr nz, animateTiles_pop
	; Replace tile
	dec hl
	ld (hl), d
	inc hl
	jr animateTiles_altTile_loop
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;            Load Map            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Loads a track
; Inputs:
;	ix: pointer to track pointer table
; Outputs:
;	Graphics, Tilemap, Background, and Entity list ram areas filled
;	with apropriate values
; Destroys:
;	a, bc, de, hl, ix, (temp) - (temp+B)
loadMap:	; {
	; Decompress graphics data
	call ld_hl_ix
	ld de, graphics
	ld bc, graphics+2048
	call decompData
	; Decompress tilemap data
	call ld_hl_ix
	ld de, tilemap
	ld bc, tilemap+4096
	call decompData
	; Decompress background data
	call ld_hl_ix
	ld de, background
	ld bc, background+1024
	call decompData
	
	
	; Organize background
	ld hl, background+$03FF-$18
	ld de, background+$04FF
	ld b, $20
organizeBg_loop:
	push bc
	ld bc, $0008
	lddr
	ld c, $20
	add hl, bc
	lddr
	ld bc, -$0018
	add hl, bc
	pop bc
	djnz organizeBg_loop
	
	
	; Create Entities
	call ld_hl_ix
	ld b, (hl)	; Get number of entities
	inc b
	dec b
	ret z
	inc hl
createMapEnt_loop:
	; Get entity ID
	ld a, (hl)
	inc hl
	push af
	; Get xPos
	ld d, (hl)
	inc hl
	xor a
	ld c, a
	srl d \ rr c
	srl d \ rra \ ld e, a
	ld (temp+2), de
	; Get yPos
	ld d, (hl)
	inc hl
	xor a
	srl d \ rr c
	srl d \ rra \ ld e, a
	ld (temp+4), de
	; Clear extra parameters
	ld de, temp+9
	push bc
	push hl
	ld hl, temp+8
	push hl
	ld (hl), 0
	ld bc, $0003
	ldir
	pop de
	pop hl
	; Read extra paramaters
	ld a, c
	or a
	jr z, createMapEnt_noParam
	; Increment number of parameters if equal to 3 (possible numbers are 0, 1, 2, & 3)
	cp $03
	jr nz, $+4
	inc c
	ld b, $00
	ld de, temp+8
	ldir
createMapEnt_noParam:
	pop bc
	; Create Entity and loop
	pop af
	push hl
	call createEntity
	pop hl
	djnz createMapEnt_loop
	ret
	
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Get Tile Collision Type      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Returns the collision type of the tile at a specified location
; Inputs:
;	de: yPos
;	hl: xPos
; Outputs:
;	a: collision type
; Destroys:
;	bc
getTileCollisionType:	; {
	push hl
	call getTile
	; Get pointer to tile collision table
	ld c, a
	xor a
	sla c
	rla
	ld b, a
	bit 7, l	; Test x position before it gets overwritten
	ld hl, tileCol
	add hl, bc
	; Increment pointer if in right half of tile
	jr z, $+3
	inc hl
	ld a, (hl)
	; Shift data if in bottom half of tile
	bit 7, e
	jr z, $+5
	call movNybbleA
	and $0F
	pop hl
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;           Get Tile           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Returns the tile at the specified location
; Inputs:
;	de: yPos
;	hl: xPos
; Outputs:
;	a: tile
; Destroys:
;	bc
getTile:	; {
	push hl
	; Get yPos * 64
	ld c, h
	ld l, d
	ld h, 0
	ld b, $06
	call shiftHL_left
	; Add xPos
	add hl, bc
	; Get pointer to tilemap
	ld bc, tilemap
	add hl, bc
	; Get tile
	ld a, (hl)
	pop hl
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          Get Keys          ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Gets the keys
;	Returns the keys held, released, and pressed on this frame
; Inputs:
;	None
; Outputs:
;	(keys) = keys held
;	(keys+7) = keys released
;	(keys+14) = keys pressed
; Destroys:
;	a, hl, bc, de, ix
getKeys:	; {
	ld ix, keys-1
	ld b, 7
	ld e, %11111110
	ld c, $01
getKeys_loop:
	out (c), e		; Set current group
	rlc e			; Increment group
	inc ix
	ld a, (ix+0)	; Get previous frame's key
	push af
	in d, (c)		; Get this frame's key
	ld (ix+0), d	; Save this frame's key
	cpl				;\
	and d			;| Get pressed keys
	ld (ix+7), a	;/
	pop hl			;\
	ld a, d			;|
	cpl				;| Get released keys
	and h			;|
	ld (ix+14), a	;/
	ld a, $FF
	out (c), a
	djnz getKeys_loop
	ret
; }
	
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;       Shift HL Right       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Shifts hl to the right
; Inputs:
;	hl: number
;	b: shift amount
; Outputs:
;	hl: number
;	b: 0
;	a: remainder
; Destroys:
;	None
shiftHL_right:		; {
	xor a
shiftHL_right_loop:
	sra h \ rr l \ rra
	djnz shiftHL_right_loop
	ret
; }


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;       Shift HL Left       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Shifts hl to the Left
; Inputs:
;	hl: number
;	b: shift amount
; Outputs:
;	hl: number
;	b: 0
; Destroys:
;	a
shiftHL_left:		; {
	ld a, h
shiftHL_left_loop:
	sla l \ rla
	djnz shiftHL_left_loop
	ld h, a
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  Move Hight Nybble to Low Nybble  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Moves the high nybble of a to the low nybble and clears the high nybble
; Inputs:
;	a: number
; Outputs:
;	a: number
; Destroys:
;	None
movNybbleA: ; {
	rrca \ rrca \ rrca \ rrca
	and %00001111
	ret
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Get Frame Input      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Reads the keyboard and translates the input
;	into controls for the kart based on the
;	specified button mappings
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	a, hl
getFrameInput:	; {
	push bc
	push de
	push ix
	call getKeys
	ld ix, raceKeyMap
	ld e, $08
getFrameInput_loop:
	; Get specified button for current control bit
	; Crontrol bits:
	; 0: Up, 1: Down, 2: Left, 3: Right, 4: Accelerate, 5: Break, 6: Hop, 7: Item
	ld a, (ix)
	inc ix
	ld b, a
	; Get control bit group
	rrca \ rrca \ rrca
	and %00000111
	ld c, a
	; Get control bit key
	ld a, b
	ld b, $00
	and %00000111
	inc a
	; Get group keys
	ld hl, heldKeys
	add hl, bc
	ld b, a
	ld a, (hl)
	; Get specified key state
	rrca
	djnz $-1
	rl d
	; Loop
	dec e
	jr nz, getFrameInput_loop
	; Save inputs to buffer & increment counter
	ld hl, numPhysicsFrames
	;ld a, (hl)
	inc (hl)
	;add a, frameInputBuff % 256
	;ld l, a
	;ld h, frameInputBuff / 256
	ld a, d
	cpl
	;ld (hl), a
	ld (curPhysicsInput), a
	pop ix
	pop de
	pop bc
	ret
	
	; Temperary button mapping, in the final this will be located in RAM for the user to change
raceKeyMap:
	.db %00000011	; Up Key
	.db %00000000	; Down Key
	.db %00000001	; Left Key
	.db %00000010	; Right Key
	.db %00110101	; 2nd Key (Accelerate)
	.db %00100111	; XT0n Key (Break)
	.db %00110110	; MODE Key (Hop)
	.db %00101111	; ALPHA Key (Item)
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;     Remove Coins from Track     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Replaces all coin tiles with road tiles
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	a, bc, hl
removeCoins:	; {
	ld hl, tilemap
	ld bc, $0010
removeCoins_loop:
	ld a, (hl)
	cp $0D
	jr nz, $+4
	ld (hl), $01
	inc hl
	djnz removeCoins_loop
	dec c
	jr nz, removeCoins_loop
	ret
; }
	
	
; Include math routines
#include math.z80
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        Error Message        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Displays an error message, then ends
;	the game when ENTER is pressed
;	The following are the values printed to the screen:
;	Version			Error ID		Timer Low		Timer High
;	Stack Ptr Low	Stack Ptr High	Stack Val Low	Stack Val High
;	Calc ID			Data Page A		Data Page B		Data Page R
;	Temp Value 12	Temp Value 13	Temp Value 14	Temp Value 15
; Inputs:
;	a: error Id
;	00: Stack Overflow
;	01: Stack Underflow
;	02: Create Ent Fail
;	03: Frame Too Long
;	04: Decompresion Failure
errorMsg:	; {
	di
	
	; Save error id for later
	ld ixh, a
	
	; Get page values
	in a, ($05)		; Page R
	ld b, a
	in a, ($07)		; Page B
	ld c, a
	; Reset pages to normal values
	ld a, $C1
	out ($07), a
	
	; Get Stack Pointer
	ld hl, $0000
	ld (curRow), hl	; Pre-set text position
	add hl, sp
	; Get Stack Value
	pop de
	
	; Reset other pages to normal values
	ld a, (calcType)
	or a
	jr z, errorMsg_resPage_83
	xor a 
	out ($05), a
	ld a, $81
	out ($07), a
	jr errorMsg_resPage_done
errorMsg_resPage_83:
	ld a, $41
	out ($07), a
errorMsg_resPage_done:
	
	; Save stack pointer and value
	ld (temp+4), hl
	ld (temp+6), de
	; Restore sp
	ld sp, (spSave)
	; Save page B & R
	ld (temp+10), bc
	; Save calcType and page A
	ld hl, (calcType)
	in a, ($06)
	ld h, a
	ld (temp+8), hl
	; Save timer
	ld hl, (globalTimerLoLo)
	ld (temp+2), hl
	; Save version & error code
	ld ixl, versionId
	ld (temp+0), ix
	
	; Copy text to RAM
	ld hl, errorMsg_text
	ld de, temp+16
	push de
	ld bc, $0020
	ldir
	; Draw text to screen
	pop hl
	b_call(_PutS)
	ld de, $0001
	ld (curRow), de
	b_call(_PutS)
	
	; Draw debug numbers to screen
	ld c, $04
	ld hl, curRow
	inc (hl)
	inc hl
	ld de, temp
errorMsg_num_loop:
	xor a
	ld (hl), a
	dec hl
	inc (hl)
	inc hl
	ld b, $04
	jr errorMsg_num_skipDash
errorMsg_num_rowLoop:
	; Draw dash
	ld a, $2D	; "-"
	b_call(_PutMap)
	inc (hl)
errorMsg_num_skipDash:
	; Draw high nybble
	ld a, (de)
	call movNybbleA
	call errorMsg_drawNybble
	; Draw low nybble
	ld a, (de)
	call errorMsg_drawNybble
	; Loop to next byte
	inc de
	djnz errorMsg_num_rowLoop
	; Loop to next row
	dec c
	jr nz, errorMsg_num_loop
	
	; Loop untill Enter is pressed
	call getKeys
errorMsg_loop:
	call getKeys
	ld a, (pressedKeys+1)
	bit 0, a
	jr z, errorMsg_loop
	jp endPrgm
	
	
errorMsg_text:
	.db "FATAL ERROR",0
	.db "SEE README",0
	
errorMsg_drawNybble:
	and $0F
	cp $0A
	jr c, $+4
	add a, $07	; Letter
	add a, $30	; Number or Letter
	b_call(_PutMap)
	inc (hl)
	ret
	
; }
	
	
; The following are functions that are coppied to RAM to be executed
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;             Interrupt SE             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Interrupt routine copied to adress $9A9A
;	when played on an 83+SE or any 84+
;	ON Key Interrupt: End Program
;	Crystal timer 1: Left audio waveform
;	Crystal timer 2: Right audio waveform
;	Crystal timer 3: Main fps clock, runs at 59 fps
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	None
intRoutine_SE:		; {
	di
	; Save registers
	push hl
	push af
	; Check if stack overflow
	ld hl, 300
	add hl, sp
	bit 7, h
	jr nz, intRoutine_SE_stackOverflow
	; Check which interrupt
	in a, ($04)
	rlca
	jr c, intRoutine_SE_crystal3
	rlca
	jr c, intRoutine_SE_crystal2
	rlca
	jr c, intRoutine_SE_crystal1
	rlca
	jr c, intRoutine_SE_link
	; Some other interupt, either ON or hardware timer {
	; Hardware timers are not used, so ON was pressed
	; Exit game
	ld a, (basePage)
	out ($06), a
	jp endPrgm
; }
intRoutine_SE_link:	; {}
intRoutine_SE_crystal3:	; {
	; Acknowlege timer 3
	ld a, %00000011
	out ($37), a
	; Play music
	in a, ($06)
	push af
	ld a, (basePage)
	out ($06), a
	call audio_step
	; Check if new frame
	ld hl, intSubFrameCounter
	dec (hl)
	jr nz, intRoutine_SE_restorePage
	ld (hl), 60 / physicsFPS
	; Increment number of physics frames to perform
	ld hl, numPhysicsFrames
	inc (hl)
; }
intRoutine_SE_restorePage:
	pop af
	out ($06), a
intRoutine_SE_return:
	; Return
	pop af
	pop hl
	ei
	ret
intRoutine_SE_stackOverflow:
	ld a, (basePage)
	out ($06), a
	xor a
	jp errorMsg
	
intRoutine_SE_crystal1:	; {
	; Too much code to fit in interupt RAM space, jump to Flash memory
	in a, ($06)
	push af
	ld a, (basePage)
	out ($06), a
	call audio_int_crystal1
	jr intRoutine_SE_restorePage
; }
intRoutine_SE_crystal2:	; {
	; Too much code to fit in interupt RAM space, jump to Flash memory
	in a, ($06)
	push af
	ld a, (basePage)
	out ($06), a
	call audio_int_crystal2
	jr intRoutine_SE_restorePage
; }


; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;             Interrupt 83             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Interrupt routine copied to adress $9A9A
;	when played on an 83+BE
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	None
intRoutine_83:		; {
	di
	; Save registers
	push hl
	ex af, af'
	; Check if Stack Overflow
	ld hl, 300
	add hl, sp
	bit 7, h
	jr nz, intRoutine_83_stackOverflow
	; Check which interrupt
	in a, ($04)
	rrca
	jr c, intRoutine_83_endPrgm
	; Acknowlege hardware timer
	; Have to do it this way on the 83+ (as far as I know)
	xor a
	out ($03), a
	ld a, ti83_intMask
	out ($03), a
	; Check if new frame
	ld hl, intSubFrameCounter
	dec (hl)
	jr nz, intRoutine_83_return
	ld (hl), $04	; HW timer runs at 118 Hz, 4 fires until new frame (29.5 fps)
	; Get inputs for this frame and add them to the buffer
	ld hl, numPhysicsFrames
	inc (hl)
	;in a, ($06)
	;push af
	;ld a, (basePage)
	;out ($06), a
	;call getFrameInput
	;pop af
	;out ($06), a
intRoutine_83_return:
	; Return
	ex af, af'
	pop hl
	ei
	ret
intRoutine_83_endPrgm:
	; Exit game
	ld a, (basePage)
	out ($06), a
	jp endPrgm
intRoutine_83_stackOverflow:
	ld a, (basePage)
	out ($06), a
	xor a
	jp errorMsg
; }
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Pop then Return      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Pops a number of values then returns
;	Used to return from a routine when
;	there are still values on the stack
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	af
pop4ret:	; {
	pop af
pop3ret:
	pop af
pop2ret:
	pop af
pop1ret:
	pop af
returnCode:
	ret
; }
	
	
ld_hl_ix:
	ld l, (ix)
	inc ix
	ld h, (ix)
	inc ix
	ret
	
hlJump_indirect:
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
hlJump:
	jp (hl)
	
putS:	; Taken directly from b_call manual		{
	push bc
	push af
	ld a, (winBtm)
	ld b, a			; b is bottom line of window
putS_10:
	ld a, (hl)		; get character
	inc hl
	or a			; check for end of string
	scf
	
	jr z, putS_20
	b_call(_putC)	; put character
	
	ld a, (curRow)	; check cursor position
	cp b
	jr c, putS_10
putS_20:
	pop bc			; restore a
	ld a, b
	pop bc			; restore bc
	ret
; }
	
endPrgm:	; End the Program {
	ld a, (calcType)
	or a
	jr z, endPrgm_83
	
	; End Program SE
	; Copy data back
	ld hl, $E000
	ld de, $C000
	ld bc, $1F00
	ldir
	; Reset Crystal Timers and link out
	call audio_exit
	; Set Memory Mapping
	out ($05), a
	ld a, $81
	out ($07), a
	jr endPrgm_both
	
endPrgm_83:
	; End Program 83
	; Set Memory Mapping
	ld a, $41
	out ($07), a
	
endPrgm_both:
	ld sp, (spSave)
	ld iy, FLAGS
endPrgm_noRAM:
	b_jump(_JForceCmdNoChar)
; }
	
	
	
	
startupText:
	.db "Press a number", 0
	.db "to scelect an", 0
	.db "animation", 0
	
#include track.z80
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Setup 3d Out-of-Bounds Tiling   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Copies 3d floor pixel draw code to RAM
;	based on the specified oob tiling
; Inputs:
;	b: tiling type
;	0 = repeat tile 0
;	1 = repeat border
;	2 = loop course
; Outputs:
;	a: $F8
; Destroys:
;	c, de, hl
setup3dOobCode:		; {
	; Data pointers
	ld hl, drawFloor_putPxl
	ld de, drawFloor_putPxl_ram
setup3dOobCode_loop:
	; Read instruction byte
	ld a, (hl)
	inc hl
	; Check if split instructions
	inc a
	jr z, setup3dOobCode_splitInstr
	; Check if end
	cp $F8
	ret z
	; Put instruction byte
	dec a
	ld (de), a
	inc de
	jr setup3dOobCode_loop
setup3dOobCode_splitInstr:
	; Split instruction
	ld c, $04
	ld a, b
	inc a
setup3dOobCode_splitInstr_findLoop:
	; Find the code to write
	dec c
	dec a
	jr z, setup3dOobCode_splitInstr_foundInstr
	push af
	call setup3dOobCode_skipInstr
	pop af
	jr setup3dOobCode_splitInstr_findLoop
setup3dOobCode_splitInstr_foundInstr:
	; Put code untill $FF
	ld a, (hl)
	inc hl
	inc a
	jr z, setup3dOobCode_endSplit
	dec a
	ld (de), a
	inc de
	jr setup3dOobCode_splitInstr_foundInstr
setup3dOobCode_endSplit:
	; Skip over remaining code
	dec c
	jr z, setup3dOobCode_loop
	call setup3dOobCode_skipInstr
	jr setup3dOobCode_endSplit
setup3dOobCode_skipInstr:
	; Skip unwanted code
	ld a, (hl)
	inc hl
	inc a
	ret z
	jr setup3dOobCode_skipInstr
	
	
drawFloor_putPxl:	; {
	; This routine is copied to RAM and is modified based on
	; how the track wants to render the out of bounds region
	; It can be rendered as a single tile repeating, rendered to
	; repeat the edge tiles, or rendered to repeat the entire course
	
	; A $FF means different instructions can be scelected
	; when this happens 3 code sections will be put, each $FF terminated
	; and when coppied to ram the code section corisponding to the
	; repeating pattern will be copied
	
	; Compute tile & pixel {
	
	ld b, l		; Save camera x lo
	; Put position in-bounds (Track is 512x512 pixels)
	; y in-bounds calculation done a bit later
	ld a, h
	.db $FF
	; Repeated Tile
	cp $02
	jr nc, $+drawFloor_putPxl_oobBraX
	.db $FF
	; Repeated Edge
	cp $02
	jr nc, $+drawFloor_putPxl_oobBraX
	.db $FF
	; Loop
	and %00000001
	ld h, a
	.db $FF
drawFloor_putPxl_endXSplit:
	
	; Calculate position in tilemap
	; Divide camera x by 8
	ld a, l
	sra h
	rra
	rra
	rra
	and %00111111
	ld l, a
drawFloor_putPxl_yPos:
	; Modulo y by 512, Multiply by 8 (Multiply y tile position by 64)
	ld c, e		; Save camera y lo
	ld a, d
	.db $FF
	; Repeated Tile
	cp $02		; Check yPos oob
	jr nc, $+drawFloor_putPxl_oobBraY
	.db $FF
	; Repeated Edge
	cp $02
	jr nc, $+drawFloor_putPxl_oobBraY+15
	.db $FF
	; Loop
	and %00000001
	ld d, a
	.db $FF
drawFloor_putPxl_endYSplit:
	sla e
	rla
	sla e
	rla
	sla e
	rla
	ld d, a
	ld a, e
	and %11000000
	ld e, a
drawFloor_putPxl_getTile:
	; Get tile pointer
	add hl, de
	ld de, tilemap
	add hl, de
	; Get tile
	ld e, (hl)
	
drawFloor_putPxl_getGraphics:
	; Get graphics pointer
	ld h, graphics/256
	; Modulo y by 8, add to graphics pointer
	ld a, c
	and %00000111
	ld l, a
	; Multiply tile by 8, add to graphics pointer
	xor a
	sla e
	rla
	sla e
	rla
	sla e
	rla
	ld d, a
	add hl, de
	
	; Get Pixel (Get bit in specified position)
	; (I can't think of a better way to do this)
	ld a, b
	and %00000111
	inc a
	ld b, a
	ld a, (hl)
	rlca
	djnz $-1
	; }
	
	; Put pixel
	ld b, iyh
	push af
	rl (ix)
	pop af
	djnz $-6
	inc ix
	
	ret
	
drawFloor_putPxl_oobBraX	.equ	$-drawFloor_putPxl_endXSplit + 2 - 11
drawFloor_putPxl_oobBraY	.equ	$-drawFloor_putPxl_endYSplit + 2
	
	.db $FF
	; Rpeated Tile
drawFloor_putPxl_oob:
	ld c, e
	ld e, $00
	jr drawFloor_putPxl_getGraphics+1
	.db $FF
	; Repeated Edge
drawFloor_putPxl_oobX:
	; Repeat edge tile
	ld b, l
	bit 7, a
	jr z, drawFloor_putPxl_oobX_east
drawFloor_putPxl_oobX_west:
	; Repeat leftmost tile
	ld hl, $0000
	jr drawFloor_putPxl_yPos+$12
drawFloor_putPxl_oobX_east:
	; Repeat rightmost tile
	ld hl, $003F
	jr drawFloor_putPxl_yPos+$12
drawFloor_putPxl_oobY:
	; Repeat edge tile
	bit 7, a
	jr z, drawFloor_putPxl_oobY_south
drawFloor_putPxl_oobY_north:
	; Repeat topmost tile
	ld de, $0000
	jr drawFloor_putPxl_getTile+$07
drawFloor_putPxl_oobY_south:
	; Repeat bottommost tile
	ld de, $0FC0
	jr drawFloor_putPxl_getTile+$07
	.db $FF
	; Loop
	.db $FF
	.db $F7
; }
	
; }
	
	
obj_stepSpinMario:
	inc (ix+ent_p0)
	ret
obj_drawSpinMario:
	; Draw Test Sprite (spinning mario)
	ld c, $02
	ld b, (ix+ent_p0)
	ld hl, marioSprite
	ld a, $08
	jp drawSprite3d_entity_fullSize
	
obj_drawTree:
	; Draw Tree
	ld c, $02		; Page
	ld hl, treeSprite	; Sprite Pointer
	xor a
	jp drawSprite3d_entity_fullSize
	
	
; List of objects
; Each object contructor slot consists of 8 bytes:
; 1 byte: Initial Flags (ImportanceHi, ImportanceLo, Solid, Hurt, Interact, Reserved, Reserved, Reserved)
; 1 byte: Initial Hitbox
; 2 bytes: Pointer to Step Code
; 2 bytes: Pointer to Collision Code
; 2 bytes: Pointer to Draw Code
objectData:
; Object 0: Empty Sprite
.dw $0000
.dw returnCode
.dw returnCode
.dw returnCode
; Object 1: Test Spinning Mario
.db %11100000	; Max importance, Solid
.db $74			; 7 Tall, Radius of 4
.dw obj_stepSpinMario
.dw returnCode
.dw obj_drawSpinMario
; Object 2: Tree
.db %11100000	; Max importance, Solid
.db $92			; 9 Tall, Radius of 2
.dw returnCode
.dw returnCode
.dw obj_drawTree


tileCol:
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $44, $44, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	
	
; Tilemap collision equates
tileColId_road		.equ	$00
tileColId_offroad	.equ	$01
tileColId_shallowWater .equ	$02
tileColId_water		.equ	$03
tileColId_wall		.equ	$04
tileColId_pit		.equ	$05
tileColId_spring	.equ	$06
tileColId_zipper	.equ	$07
tileColId_coin		.equ	$08
tileColId_pain		.equ	$09
tileColId_quicksand	.equ	$0A
tileColId_lava		.equ	$0B
tileColId_bouncyWall .equ	$0C
tileColId_crumbleWall .equ	$0D
tileColId_oob		.equ	$0E
tileColId_heavyOffroad .equ	$0F
	
	
	
#define audio_location $80
#include "audio.z80"

#include "kart.z80"
#include "entity.z80"
	
	
; Block out to next position that ends in $00 and paste in lookup tables
tableStart:
#if ((tableStart / 256) * 256) != tableStart
.block ((tableStart / 256) * 256) - tableStart + 256
#endif
padEnd:
.echo "Page 1 Padding: ", (padEnd - tableStart), " bytes\n"
#include "tables.z80"
tableEnd:
	
	
pageOneEnd:
pageOneSize	.equ	pageOneEnd-$4000
.echo "Main Code Page"
.echo "Page 1 Size: ", pageOneSize, " bytes"
.echo (100*pageOneSize/16384), "%\n"
	
	
	
.block $4000-pageOneSize
.org $4000


	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;             Draw 3D Floor             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Description:
;	Draws the 3D floor to the image buffer
;	Thanks to Circuit10 for creating this very fast meathod
;	
;	A lookup table is used to find the x and y sample positions
;	on the floor, with the initial index into the lookup table being
;	based on the angle of the camera. This produces a projection with
;	a fish-eye lens distortion. Another lookup table is used to correct
;	the y-position on the screen. This cannot be baked in to the other
;	lookup table since the y correction is based on the location on screen
;	and is unaffected by camera rotation. The y correction is applied
;	before the lookup into the sample lookup table. The end result is still
;	slightly distorted in the screen x direction, but it should be good
;	enough
;	
;	Other optimizations are described in the code bellow
; Inputs:
;	None
; Outputs:
;	None
; Destroys:
;	a, bc, de, hl, bc', de', hl', ix, iy
drawFloor:	; Draws the 3d floor {
	; Setup 3d floor resolution & foviation variables
	ld iy, (scrn_foviateBound)
	; d: counter until foviation stops
	; e: counter until foviation starts up again
	ld d, iyl
	ld a, $08
	sub d
	ld e, a
	exx
	; Screen data pointer, start drawing halfway down
	ld ix, plotSScreen + (2 * 64) + 32
	
	; Get which angle quadrant is being drawn from and for how long
	; Each angle quadrant has its own loop for speed eficiency
	; and will switch loops when entering a new qudrant
	; Get current quadrant counter
	ld a, (cam_ang)
	add a, $20
	ld b, a
	and %00111111
	ld c, a
	ld a, $40
	sub c
	ld c, a
	
	; Get current angle quadrant and jump to corresponding loop
	bit 7, b
	jp nz, drawFloor_quad180or270
	bit 6, b
	jp nz, drawFloor_quad90_startLoop
	
	
	; Quadrant 0 {
drawFloor_quad0_startLoop:
	exx
	; Set initial distortion table index
	ld hl, distortionCorrect_table
	
	; Column Loop (8 vertical strips)
	ld b, $08
drawFloor_quad0_colLoop:
	push bc
	; Strip Loop (8 pixels horizontaly per strip)
	ld c, $08
drawFloor_quad0_stripLoop:
	
	; Row Loop (32 drawn rows)
	ld b, $20
drawFloor_quad0_rowLoop:
	
	
	; Get distortion correct pointer and retrieve data
	ld a, (hl)
	inc hl
	
	; Get sample angles
	exx
	ld b, a
	; Multiply index by 128 (32*4)
	ld h, c
	xor a
	ld d, a	; Preemptively set yPos hi byte to 0
	srl h
	rra
	ld l, a
	; Multiply yPos by 4
	ld a, b
	rlca
	rlca
	ld e, a
	push bc		; Save current angle index
	
	; Get pointer and retrieve data, 2 bytes per coordinate
	; hl = yPos		de = xPos
	add hl, de
	ld de, angleData_table-128	; Angle index is one over the correct amount
	add hl, de
	ld e, (hl)	; x pos lo
	inc hl
	ld d, (hl)	; x pos hi
	inc hl
	ld c, (hl)	; y pos lo
	inc hl
	ld b, (hl)	; y pos hi
	
	; 0 quadrant, no need to rotate screen, flip y test
	sub a
	sub c
	ld c, a
	sbc a, a
	sub b
	ld b, a
	
	; Add camera position
	; Add camera y
	ld hl, (cam_yPos)
	add hl, bc
	ex de, hl
	; Add camera x
	ld bc, (cam_xPos)
	add hl, bc
	
	call drawFloor_putPxl_ram
	
	pop bc	; Retrieve current angle index
	
	; Loop
	exx
	djnz drawFloor_quad0_rowLoop
	; Roll-back screen pointer position
	exx
	ld de, -32
	add ix, de
	; Check if we must move on to the next quadrant
	ld a, c
	dec a
	sub iyh
	jp c, drawFloor_quad90_entr
drawFloor_quad0_contQuad:
	inc a
	ld c, a
	exx
	ld iyl, iyh
	dec iyl
	jr z, drawFloor_quad0_noScaleSkipTable
	push de
	ld de, $0020
	add hl, de
	dec iyl
	jr nz, $-3
	pop de
drawFloor_quad0_noScaleSkipTable:
	ld a, c
	sub iyh
	ld c, a
	jp nz, drawFloor_quad0_stripLoop
	; Switch foviation if necesarry
	dec d
	jr nz, $+7
	ld a, iyh
	rrca
	ld iyh, a
	dec e
	jr nz, $+7
	ld a, iyh
	rlca
	ld iyh, a
	; Set screen pointer to next column
	ld bc, 64
	add ix, bc
	pop bc
	dec b
	jp nz, drawFloor_quad0_colLoop
	
	ret
	
drawFloor_quad0_entr:
	add a, $40
	jr drawFloor_quad0_contQuad
; }
	
	; Quadrant 90 {
drawFloor_quad90_startLoop:
	exx
	; Set initial distortion table index
	ld hl, distortionCorrect_table
	
	; Column Loop (8 vertical strips)
	ld b, $08
drawFloor_quad90_colLoop:
	push bc
	; Strip Loop (8 pixels horizontaly per strip)
	ld c, $08
drawFloor_quad90_stripLoop:
	
	; Row Loop (32 drawn rows)
	ld b, $20
drawFloor_quad90_rowLoop:
	
	
	; Get distortion correct pointer and retrieve data
	ld a, (hl)
	inc hl
	
	; Get sample angles
	exx
	ld b, a
	; Multiply index by 128 (32*4)
	ld h, c
	xor a
	ld d, a	; Preemptively set yPos hi byte to 0
	srl h
	rra
	ld l, a
	; Multiply yPos by 4
	ld a, b
	rlca
	rlca
	ld e, a
	push bc		; Save current angle index
	
	; Get pointer and retrieve data, 2 bytes per coordinate
	; hl = yPos		de = xPos
	add hl, de
	ld de, angleData_table-128	; Angle index is one over the correct amount
	add hl, de
	ld e, (hl)	; x pos lo
	inc hl
	ld d, (hl)	; x pos hi
	inc hl
	ld a, (hl)	; y pos lo
	inc hl
	ld h, (hl)	; y pos hi
	ld l, a
	; 90 quadrant, negate xPos, swap xPos & yPos, and negate yPos (negates cancel out)
	; 16-bit additive inverse copied from: http://z80-heaven.wikidot.com/optimization
	ex de, hl
	
	
	; Add camera position
	; Add camera y
	ld bc, (cam_yPos)
	add hl, bc
	ex de, hl
	; Add camera x
	ld bc, (cam_xPos)
	add hl, bc
	
	call drawFloor_putPxl_ram
	
	pop bc	; Retrieve current angle index
	
	; Loop
	exx
	djnz drawFloor_quad90_rowLoop
	; Roll-back screen pointer position
	exx
	ld de, -32
	add ix, de
	; Check if we must move on to the next quadrant
	ld a, c
	dec a
	sub iyh
	jp c, drawFloor_quad180_entr
drawFloor_quad90_contQuad:
	inc a
	ld c, a
	exx
	ld iyl, iyh
	dec iyl
	jr z, drawFloor_quad90_noScaleSkipTable
	push de
	ld de, $0020
	add hl, de
	dec iyl
	jr nz, $-3
	pop de
drawFloor_quad90_noScaleSkipTable:
	ld a, c
	sub iyh
	ld c, a
	jp nz, drawFloor_quad90_stripLoop
	; Switch foviation if necesarry
	dec d
	jr nz, $+7
	ld a, iyh
	rrca
	ld iyh, a
	dec e
	jr nz, $+7
	ld a, iyh
	rlca
	ld iyh, a
	; Set screen pointer to next column
	ld bc, 64
	add ix, bc
	pop bc
	dec b
	jp nz, drawFloor_quad90_colLoop
	
	ret
	
drawFloor_quad90_entr:
	add a, $40
	jr drawFloor_quad90_contQuad
; }
	
drawFloor_quad180or270:
	bit 6, b
	jp nz, drawFloor_quad270_startLoop
	
	; Quadrant 180 {
drawFloor_quad180_startLoop:
	exx
	; Set initial distortion table index
	ld hl, distortionCorrect_table
	
	; Column Loop (8 vertical strips)
	ld b, $08
drawFloor_quad180_colLoop:
	push bc
	; Strip Loop (8 pixels horizontaly per strip)
	ld c, $08
drawFloor_quad180_stripLoop:
	
	; Row Loop (32 drawn rows)
	ld b, $20
drawFloor_quad180_rowLoop:
	
	
	; Get distortion correct pointer and retrieve data
	ld a, (hl)
	inc hl
	
	; Get sample angles
	exx
	ld b, a
	; Multiply index by 128 (32*4)
	ld h, c
	xor a
	ld d, a	; Preemptively set yPos hi byte to 0
	srl h
	rra
	ld l, a
	; Multiply yPos by 4
	ld a, b
	rlca
	rlca
	ld e, a
	push bc		; Save current angle index
	
	; Get pointer and retrieve data, 2 bytes per coordinate
	; hl = yPos		de = xPos
	add hl, de
	ld de, angleData_table-128	; Angle index is one over the correct amount
	add hl, de
	ld e, (hl)	; x pos lo
	inc hl
	ld d, (hl)	; x pos hi
	inc hl
	ld c, (hl)	; y pos lo
	inc hl
	ld b, (hl)	; y pos hi
	
	; 180 quadrant, negate xPos and yPos
	; 16-bit additive inverse copied from: http://z80-heaven.wikidot.com/optimization
	sub a
	sub e
	ld e, a
	sbc a, a
	sub d
	ld d, a
	
	
	; Add camera position
	; Add camera y
	ld hl, (cam_yPos)
	add hl, bc
	ex de, hl
	; Add camera x
	ld bc, (cam_xPos)
	add hl, bc
	
	call drawFloor_putPxl_ram
	
	pop bc	; Retrieve current angle index
	
	; Loop
	exx
	djnz drawFloor_quad180_rowLoop
	; Roll-back screen pointer position
	exx
	ld de, -32
	add ix, de
	; Check if we must move on to the next quadrant
	ld a, c
	dec a
	sub iyh
	jp c, drawFloor_quad270_entr
drawFloor_quad180_contQuad:
	inc a
	ld c, a
	exx
	ld iyl, iyh
	dec iyl
	jr z, drawFloor_quad180_noScaleSkipTable
	push de
	ld de, $0020
	add hl, de
	dec iyl
	jr nz, $-3
	pop de
drawFloor_quad180_noScaleSkipTable:
	ld a, c
	sub iyh
	ld c, a
	jp nz, drawFloor_quad180_stripLoop
	; Switch foviation if necesarry
	dec d
	jr nz, $+7
	ld a, iyh
	rrca
	ld iyh, a
	dec e
	jr nz, $+7
	ld a, iyh
	rlca
	ld iyh, a
	; Set screen pointer to next column
	ld bc, 64
	add ix, bc
	pop bc
	dec b
	jp nz, drawFloor_quad180_colLoop
	
	ret
	
drawFloor_quad180_entr:
	add a, $40
	jr drawFloor_quad180_contQuad
; }
	
	; Quadrant 270 {
drawFloor_quad270_startLoop:
	exx
	; Set initial distortion table index
	ld hl, distortionCorrect_table
	
	; Column Loop (8 vertical strips)
	ld b, $08
drawFloor_quad270_colLoop:
	push bc
	; Strip Loop (8 pixels horizontaly per strip)
	ld c, $08
drawFloor_quad270_stripLoop:
	
	; Row Loop (32 drawn rows)
	ld b, $20
drawFloor_quad270_rowLoop:
	
	
	; Get distortion correct pointer and retrieve data
	ld a, (hl)
	inc hl
	
	; Get sample angles
	exx
	ld b, a
	; Multiply index by 128 (32*4)
	ld h, c
	xor a
	ld d, a	; Preemptively set yPos hi byte to 0
	srl h
	rra
	ld l, a
	; Multiply yPos by 4
	ld a, b
	rlca
	rlca
	ld e, a
	push bc		; Save current angle index
	
	; Get pointer and retrieve data, 2 bytes per coordinate
	; hl = yPos		de = xPos
	add hl, de
	ld de, angleData_table-128	; Angle index is one over the correct amount
	add hl, de
	ld e, (hl)	; x pos lo
	inc hl
	ld d, (hl)	; x pos hi
	inc hl
	ld a, (hl)	; y pos lo
	inc hl
	ld h, (hl)	; y pos hi
	ld l, a
	
	; 270 quadrant, negate xPos & yPos and swap xPos & yPos
	; 16-bit additive inverse copied from: http://z80-heaven.wikidot.com/optimization
	sub a
	sub l
	ld l, a
	sbc a, a
	sub h
	ld h, a
	
	sub a
	sub e
	ld e, a
	sbc a, a
	sub d
	ld d, a
	ex de, hl
	
	
	; Add camera position
	; Add camera y
	ld bc, (cam_yPos)
	add hl, bc
	ex de, hl
	; Add camera x
	ld bc, (cam_xPos)
	add hl, bc
	
	call drawFloor_putPxl_ram
	
	pop bc	; Retrieve current angle index
	
	; Loop
	exx
	djnz drawFloor_quad270_rowLoop
	; Roll-back screen pointer position
	exx
	ld de, -32
	add ix, de
	; Check if we must move on to the next quadrant
	ld a, c
	dec a
	sub iyh
	jp c, drawFloor_quad0_entr
drawFloor_quad270_contQuad:
	inc a
	ld c, a
	exx
	ld iyl, iyh
	dec iyl
	jr z, drawFloor_quad270_noScaleSkipTable
	push de
	ld de, $0020
	add hl, de
	dec iyl
	jr nz, $-3
	pop de
drawFloor_quad270_noScaleSkipTable:
	ld a, c
	sub iyh
	ld c, a
	jp nz, drawFloor_quad270_stripLoop
	; Switch foviation if necesarry
	dec d
	jr nz, $+7
	ld a, iyh
	rrca
	ld iyh, a
	dec e
	jr nz, $+7
	ld a, iyh
	rlca
	ld iyh, a
	; Set screen pointer to next column
	ld bc, 64
	add ix, bc
	pop bc
	dec b
	jp nz, drawFloor_quad270_colLoop
	
	ret
	
drawFloor_quad270_entr:
	add a, $40
	jr drawFloor_quad270_contQuad
; }
	
	
	.dw $4800
angleData_table:	; {
	.dw $0145, $0007, $00d9, $0005, $00a2, $0003, $0082, $0003, $006c, $0002, $005c, $0002, $0051, $0001, $0048, $0001, $0040, $0001, $003a, $0001, $0035, $0001, $0031, $0001, $002e, $0001, $002a, $0001, $0028, $0000, $0025, $0000, $0023, $0000, $0021, $0000, $001f, $0000, $001e, $0000, $001c, $0000, $001b, $0000, $001a, $0000, $0019, $0000, $0018, $0000, $0017, $0000, $0016, $0000, $0015, $0000, $0014, $0000, $0013, $0000, $0013, $0000, $0012, $0000
	.dw $0145, $000f, $00d8, $000a, $00a2, $0007, $0082, $0006, $006c, $0005, $005c, $0004, $0051, $0003, $0048, $0003, $0040, $0003, $003a, $0002, $0035, $0002, $0031, $0002, $002e, $0002, $002a, $0002, $0028, $0001, $0025, $0001, $0023, $0001, $0021, $0001, $001f, $0001, $001e, $0001, $001c, $0001, $001b, $0001, $001a, $0001, $0019, $0001, $0018, $0001, $0017, $0001, $0016, $0001, $0015, $0001, $0014, $0001, $0013, $0000, $0013, $0000, $0012, $0000
	.dw $0145, $0017, $00d8, $000f, $00a2, $000b, $0081, $0009, $006c, $0007, $005c, $0006, $0051, $0005, $0047, $0005, $0040, $0004, $003a, $0004, $0035, $0003, $0031, $0003, $002d, $0003, $002a, $0003, $0028, $0002, $0025, $0002, $0023, $0002, $0021, $0002, $001f, $0002, $001e, $0002, $001c, $0002, $001b, $0002, $001a, $0001, $0019, $0001, $0018, $0001, $0017, $0001, $0016, $0001, $0015, $0001, $0014, $0001, $0013, $0001, $0013, $0001, $0012, $0001
	.dw $0144, $001f, $00d8, $0015, $00a2, $000f, $0081, $000c, $006b, $000a, $005c, $0009, $0050, $0007, $0047, $0007, $0040, $0006, $003a, $0005, $0035, $0005, $0031, $0004, $002d, $0004, $002a, $0004, $0028, $0003, $0025, $0003, $0023, $0003, $0021, $0003, $001f, $0003, $001e, $0002, $001c, $0002, $001b, $0002, $001a, $0002, $0019, $0002, $0018, $0002, $0017, $0002, $0016, $0002, $0015, $0002, $0014, $0002, $0013, $0001, $0013, $0001, $0012, $0001
	.dw $0143, $0027, $00d7, $001a, $00a1, $0013, $0081, $000f, $006b, $000d, $005c, $000b, $0050, $0009, $0047, $0008, $0040, $0007, $003a, $0007, $0035, $0006, $0031, $0006, $002d, $0005, $002a, $0005, $0027, $0004, $0025, $0004, $0023, $0004, $0021, $0004, $001f, $0003, $001e, $0003, $001c, $0003, $001b, $0003, $001a, $0003, $0019, $0003, $0018, $0002, $0017, $0002, $0016, $0002, $0015, $0002, $0014, $0002, $0013, $0002, $0013, $0002, $0012, $0002
	.dw $0142, $002f, $00d6, $001f, $00a1, $0017, $0080, $0013, $006b, $000f, $005b, $000d, $0050, $000b, $0047, $000a, $0040, $0009, $003a, $0008, $0035, $0007, $0031, $0007, $002d, $0006, $002a, $0006, $0027, $0005, $0025, $0005, $0023, $0005, $0021, $0004, $001f, $0004, $001e, $0004, $001c, $0004, $001b, $0004, $001a, $0003, $0018, $0003, $0017, $0003, $0017, $0003, $0016, $0003, $0015, $0003, $0014, $0003, $0013, $0002, $0013, $0002, $0012, $0002
	.dw $0141, $0037, $00d6, $0025, $00a0, $001b, $0080, $0016, $006a, $0012, $005b, $000f, $0050, $000d, $0047, $000c, $003f, $000b, $003a, $000a, $0035, $0009, $0030, $0008, $002d, $0007, $002a, $0007, $0027, $0006, $0025, $0006, $0023, $0006, $0021, $0005, $001f, $0005, $001d, $0005, $001c, $0004, $001b, $0004, $0019, $0004, $0018, $0004, $0017, $0004, $0016, $0003, $0016, $0003, $0015, $0003, $0014, $0003, $0013, $0003, $0013, $0003, $0012, $0003
	.dw $013f, $003f, $00d5, $002a, $009f, $001f, $007f, $0019, $006a, $0015, $005b, $0012, $004f, $000f, $0046, $000e, $003f, $000c, $0039, $000b, $0034, $000a, $0030, $0009, $002d, $0008, $002a, $0008, $0027, $0007, $0025, $0007, $0022, $0006, $0021, $0006, $001f, $0006, $001d, $0005, $001c, $0005, $001b, $0005, $0019, $0005, $0018, $0004, $0017, $0004, $0016, $0004, $0015, $0004, $0015, $0004, $0014, $0004, $0013, $0003, $0012, $0003, $0012, $0003
	.dw $013d, $0047, $00d3, $002f, $009e, $0023, $007f, $001c, $0069, $0017, $005a, $0014, $004f, $0011, $0046, $000f, $003f, $000e, $0039, $000c, $0034, $000b, $0030, $000a, $002c, $000a, $0029, $0009, $0027, $0008, $0024, $0008, $0022, $0007, $0020, $0007, $001f, $0006, $001d, $0006, $001c, $0006, $001a, $0006, $0019, $0005, $0018, $0005, $0017, $0005, $0016, $0005, $0015, $0004, $0014, $0004, $0014, $0004, $0013, $0004, $0012, $0004, $0012, $0004
	.dw $013c, $004f, $00d2, $0034, $009d, $0027, $007e, $001f, $0069, $001a, $005a, $0016, $004e, $0013, $0045, $0011, $003e, $000f, $0039, $000e, $0034, $000d, $0030, $000c, $002c, $000b, $0029, $000a, $0027, $0009, $0024, $0009, $0022, $0008, $0020, $0008, $001e, $0007, $001d, $0007, $001c, $0007, $001a, $0006, $0019, $0006, $0018, $0006, $0017, $0005, $0016, $0005, $0015, $0005, $0014, $0005, $0014, $0005, $0013, $0004, $0012, $0004, $0012, $0004
	.dw $013a, $0056, $00d1, $0039, $009c, $002b, $007d, $0022, $0068, $001c, $0059, $0018, $004e, $0015, $0045, $0013, $003e, $0011, $0038, $000f, $0033, $000e, $002f, $000d, $002c, $000c, $0029, $000b, $0026, $000a, $0024, $000a, $0022, $0009, $0020, $0008, $001e, $0008, $001d, $0008, $001b, $0007, $001a, $0007, $0019, $0007, $0018, $0006, $0017, $0006, $0016, $0006, $0015, $0005, $0014, $0005, $0013, $0005, $0013, $0005, $0012, $0005, $0011, $0004
	.dw $0137, $005e, $00cf, $003f, $009b, $002f, $007c, $0025, $0067, $001f, $0058, $001a, $004d, $0017, $0045, $0014, $003e, $0012, $0038, $0011, $0033, $000f, $002f, $000e, $002c, $000d, $0029, $000c, $0026, $000b, $0024, $000a, $0022, $000a, $0020, $0009, $001e, $0009, $001d, $0008, $001b, $0008, $001a, $0008, $0019, $0007, $0018, $0007, $0017, $0007, $0016, $0006, $0015, $0006, $0014, $0006, $0013, $0006, $0013, $0005, $0012, $0005, $0011, $0005
	.dw $0135, $0066, $00ce, $0044, $009a, $0033, $007b, $0028, $0066, $0022, $0058, $001d, $004d, $0019, $0044, $0016, $003d, $0014, $0037, $0012, $0033, $0010, $002f, $000f, $002b, $000e, $0028, $000d, $0026, $000c, $0023, $000b, $0021, $000b, $001f, $000a, $001e, $000a, $001c, $0009, $001b, $0009, $001a, $0008, $0019, $0008, $0017, $0007, $0016, $0007, $0016, $0007, $0015, $0007, $0014, $0006, $0013, $0006, $0012, $0006, $0012, $0006, $0011, $0005
	.dw $0132, $006d, $00cc, $0049, $0099, $0036, $007a, $002b, $0066, $0024, $0057, $001f, $004c, $001b, $0043, $0018, $003d, $0015, $0037, $0013, $0032, $0012, $002e, $0010, $002b, $000f, $0028, $000e, $0025, $000d, $0023, $000c, $0021, $000c, $001f, $000b, $001e, $000a, $001c, $000a, $001b, $0009, $0019, $0009, $0018, $0008, $0017, $0008, $0016, $0008, $0015, $0007, $0015, $0007, $0014, $0007, $0013, $0006, $0012, $0006, $0012, $0006, $0011, $0006
	.dw $0130, $0075, $00ca, $004e, $0097, $003a, $0079, $002e, $0065, $0027, $0056, $0021, $004b, $001d, $0043, $0019, $003c, $0017, $0036, $0015, $0032, $0013, $002e, $0011, $002b, $0010, $0028, $000f, $0025, $000e, $0023, $000d, $0021, $000c, $001f, $000c, $001d, $000b, $001c, $000a, $001a, $000a, $0019, $0009, $0018, $0009, $0017, $0009, $0016, $0008, $0015, $0008, $0014, $0008, $0014, $0007, $0013, $0007, $0012, $0007, $0012, $0006, $0011, $0006
	.dw $012d, $007c, $00c8, $0053, $0096, $003e, $0078, $0031, $0064, $0029, $0055, $0023, $004b, $001f, $0042, $001b, $003b, $0018, $0036, $0016, $0031, $0014, $002d, $0013, $002a, $0011, $0027, $0010, $0025, $000f, $0022, $000e, $0020, $000d, $001f, $000c, $001d, $000c, $001c, $000b, $001a, $000b, $0019, $000a, $0018, $000a, $0017, $0009, $0016, $0009, $0015, $0008, $0014, $0008, $0013, $0008, $0013, $0007, $0012, $0007, $0011, $0007, $0011, $0007
	.dw $0129, $0084, $00c6, $0058, $0094, $0041, $0077, $0034, $0063, $002b, $0054, $0025, $004a, $0020, $0041, $001d, $003b, $001a, $0035, $0017, $0031, $0015, $002d, $0014, $002a, $0012, $0027, $0011, $0024, $0010, $0022, $000f, $0020, $000e, $001e, $000d, $001d, $000c, $001b, $000c, $001a, $000b, $0019, $000b, $0018, $000a, $0017, $000a, $0016, $0009, $0015, $0009, $0014, $0009, $0013, $0008, $0012, $0008, $0012, $0008, $0011, $0007, $0011, $0007
	.dw $0126, $008b, $00c4, $005c, $0093, $0045, $0075, $0037, $0062, $002e, $0053, $0027, $0049, $0022, $0041, $001e, $003a, $001b, $0035, $0019, $0030, $0017, $002c, $0015, $0029, $0013, $0026, $0012, $0024, $0011, $0022, $0010, $0020, $000f, $001e, $000e, $001c, $000d, $001b, $000c, $001a, $000c, $0018, $000b, $0017, $000b, $0016, $000a, $0015, $000a, $0015, $0009, $0014, $0009, $0013, $0009, $0012, $0008, $0012, $0008, $0011, $0008, $0010, $0007
	.dw $0123, $0092, $00c2, $0061, $0091, $0049, $0074, $003a, $0060, $0030, $0052, $0029, $0048, $0024, $0040, $0020, $0039, $001d, $0034, $001a, $0030, $0018, $002c, $0016, $0029, $0014, $0026, $0013, $0023, $0012, $0021, $0010, $001f, $0010, $001e, $000f, $001c, $000e, $001b, $000d, $0019, $000c, $0018, $000c, $0017, $000b, $0016, $000b, $0015, $000a, $0014, $000a, $0013, $000a, $0013, $0009, $0012, $0009, $0011, $0008, $0011, $0008, $0010, $0008
	.dw $011f, $0099, $00bf, $0066, $008f, $004c, $0072, $003d, $005f, $0033, $0051, $002b, $0047, $0026, $003f, $0022, $0039, $001e, $0033, $001b, $002f, $0019, $002b, $0017, $0028, $0015, $0025, $0014, $0023, $0012, $0021, $0011, $001f, $0010, $001d, $000f, $001c, $000f, $001a, $000e, $0019, $000d, $0018, $000d, $0017, $000c, $0016, $000b, $0015, $000b, $0014, $000a, $0013, $000a, $0012, $000a, $0012, $0009, $0011, $0009, $0011, $0009, $0010, $0008
	.dw $011b, $00a0, $00bc, $006b, $008d, $0050, $0071, $0040, $005e, $0035, $0050, $002d, $0046, $0028, $003e, $0023, $0038, $001f, $0033, $001d, $002e, $001a, $002b, $0018, $0028, $0016, $0025, $0015, $0022, $0013, $0020, $0012, $001e, $0011, $001d, $0010, $001b, $000f, $001a, $000e, $0019, $000e, $0018, $000d, $0016, $000c, $0015, $000c, $0015, $000b, $0014, $000b, $0013, $000b, $0012, $000a, $0012, $000a, $0011, $0009, $0010, $0009, $0010, $0009
	.dw $0117, $00a7, $00ba, $006f, $008b, $0053, $006f, $0042, $005d, $0037, $004f, $002f, $0045, $0029, $003d, $0025, $0037, $0021, $0032, $001e, $002e, $001b, $002a, $0019, $0027, $0017, $0024, $0016, $0022, $0014, $0020, $0013, $001e, $0012, $001c, $0011, $001b, $0010, $001a, $000f, $0018, $000e, $0017, $000e, $0016, $000d, $0015, $000c, $0014, $000c, $0013, $000b, $0013, $000b, $0012, $000b, $0011, $000a, $0011, $000a, $0010, $0009, $0010, $0009
	.dw $0113, $00ae, $00b7, $0074, $0089, $0057, $006e, $0045, $005b, $003a, $004e, $0031, $0044, $002b, $003c, $0026, $0036, $0022, $0031, $001f, $002d, $001c, $002a, $001a, $0026, $0018, $0024, $0016, $0021, $0015, $001f, $0014, $001e, $0013, $001c, $0012, $001a, $0011, $0019, $0010, $0018, $000f, $0017, $000e, $0016, $000e, $0015, $000d, $0014, $000c, $0013, $000c, $0012, $000b, $0012, $000b, $0011, $000b, $0010, $000a, $0010, $000a, $000f, $0009
	.dw $010e, $00b5, $00b4, $0078, $0087, $005a, $006c, $0048, $005a, $003c, $004d, $0033, $0043, $002d, $003b, $0028, $0035, $0024, $0030, $0020, $002c, $001d, $0029, $001b, $0026, $0019, $0023, $0017, $0021, $0016, $001f, $0014, $001d, $0013, $001c, $0012, $001a, $0011, $0019, $0010, $0018, $0010, $0016, $000f, $0015, $000e, $0014, $000e, $0014, $000d, $0013, $000c, $0012, $000c, $0011, $000b, $0011, $000b, $0010, $000b, $0010, $000a, $000f, $000a
	.dw $010a, $00bb, $00b1, $007d, $0085, $005d, $006a, $004a, $0058, $003e, $004b, $0035, $0042, $002e, $003a, $0029, $0035, $0025, $0030, $0021, $002c, $001f, $0028, $001c, $0025, $001a, $0023, $0018, $0020, $0017, $001e, $0015, $001d, $0014, $001b, $0013, $001a, $0012, $0018, $0011, $0017, $0010, $0016, $000f, $0015, $000f, $0014, $000e, $0013, $000d, $0013, $000d, $0012, $000c, $0011, $000c, $0010, $000b, $0010, $000b, $000f, $000b, $000f, $000a
	.dw $0105, $00c2, $00ae, $0081, $0082, $0061, $0068, $004d, $0057, $0040, $004a, $0037, $0041, $0030, $0039, $002a, $0034, $0026, $002f, $0023, $002b, $0020, $0027, $001d, $0025, $001b, $0022, $0019, $0020, $0017, $001e, $0016, $001c, $0015, $001b, $0014, $0019, $0013, $0018, $0012, $0017, $0011, $0016, $0010, $0015, $000f, $0014, $000f, $0013, $000e, $0012, $000d, $0011, $000d, $0011, $000c, $0010, $000c, $0010, $000b, $000f, $000b, $000e, $000b
	.dw $0100, $00c8, $00ab, $0085, $0080, $0064, $0066, $0050, $0055, $0042, $0049, $0039, $0040, $0031, $0038, $002c, $0033, $0027, $002e, $0024, $002a, $0021, $0027, $001e, $0024, $001c, $0021, $001a, $001f, $0018, $001d, $0017, $001c, $0015, $001a, $0014, $0019, $0013, $0017, $0012, $0016, $0011, $0015, $0010, $0014, $0010, $0013, $000f, $0013, $000e, $0012, $000e, $0011, $000d, $0010, $000d, $0010, $000c, $000f, $000c, $000f, $000b, $000e, $000b
	.dw $00fb, $00ce, $00a7, $0089, $007d, $0067, $0064, $0052, $0053, $0044, $0047, $003a, $003e, $0033, $0037, $002d, $0032, $0029, $002d, $0025, $0029, $0022, $0026, $001f, $0023, $001d, $0021, $001b, $001f, $0019, $001d, $0017, $001b, $0016, $001a, $0015, $0018, $0014, $0017, $0013, $0016, $0012, $0015, $0011, $0014, $0010, $0013, $0010, $0012, $000f, $0011, $000e, $0011, $000e, $0010, $000d, $0010, $000d, $000f, $000c, $000e, $000c, $000e, $000b
	.dw $00f6, $00d4, $00a4, $008d, $007b, $006a, $0062, $0055, $0052, $0046, $0046, $003c, $003d, $0035, $0036, $002f, $0031, $002a, $002c, $0026, $0028, $0023, $0025, $0020, $0022, $001e, $0020, $001c, $001e, $001a, $001c, $0018, $001a, $0017, $0019, $0016, $0018, $0014, $0016, $0013, $0015, $0012, $0014, $0012, $0013, $0011, $0013, $0010, $0012, $000f, $0011, $000f, $0010, $000e, $0010, $000e, $000f, $000d, $000f, $000d, $000e, $000c, $000e, $000c
	.dw $00f1, $00da, $00a0, $0091, $0078, $006d, $0060, $0057, $0050, $0048, $0044, $003e, $003c, $0036, $0035, $0030, $0030, $002b, $002b, $0027, $0027, $0024, $0024, $0021, $0022, $001e, $001f, $001c, $001d, $001b, $001b, $0019, $001a, $0017, $0018, $0016, $0017, $0015, $0016, $0014, $0015, $0013, $0014, $0012, $0013, $0011, $0012, $0010, $0011, $0010, $0011, $000f, $0010, $000f, $000f, $000e, $000f, $000d, $000e, $000d, $000e, $000c, $000d, $000c
	.dw $00ec, $00e0, $009d, $0095, $0075, $0070, $005e, $0059, $004e, $004a, $0043, $0040, $003a, $0038, $0034, $0031, $002e, $002c, $002a, $0028, $0027, $0025, $0024, $0022, $0021, $001f, $001f, $001d, $001d, $001b, $001b, $001a, $0019, $0018, $0018, $0017, $0017, $0016, $0015, $0014, $0014, $0013, $0013, $0013, $0013, $0012, $0012, $0011, $0011, $0010, $0010, $0010, $0010, $000f, $000f, $000e, $000f, $000e, $000e, $000d, $000d, $000d, $000d, $000c
	.dw $00e6, $00e6, $0099, $0099, $0073, $0073, $005c, $005c, $004c, $004c, $0041, $0041, $0039, $0039, $0033, $0033, $002d, $002d, $0029, $0029, $0026, $0026, $0023, $0023, $0020, $0020, $001e, $001e, $001c, $001c, $001a, $001a, $0019, $0019, $0017, $0017, $0016, $0016, $0015, $0015, $0014, $0014, $0013, $0013, $0012, $0012, $0011, $0011, $0011, $0011, $0010, $0010, $000f, $000f, $000f, $000f, $000e, $000e, $000e, $000e, $000d, $000d, $000d, $000d
	.dw $00e0, $00ec, $0095, $009d, $0070, $0075, $0059, $005e, $004a, $004e, $0040, $0043, $0038, $003a, $0031, $0034, $002c, $002e, $0028, $002a, $0025, $0027, $0022, $0024, $001f, $0021, $001d, $001f, $001b, $001d, $001a, $001b, $0018, $0019, $0017, $0018, $0016, $0017, $0014, $0015, $0013, $0014, $0013, $0013, $0012, $0013, $0011, $0012, $0010, $0011, $0010, $0010, $000f, $0010, $000e, $000f, $000e, $000f, $000d, $000e, $000d, $000d, $000c, $000d
	.dw $00da, $00f1, $0091, $00a0, $006d, $0078, $0057, $0060, $0048, $0050, $003e, $0044, $0036, $003c, $0030, $0035, $002b, $0030, $0027, $002b, $0024, $0027, $0021, $0024, $001e, $0022, $001c, $001f, $001b, $001d, $0019, $001b, $0017, $001a, $0016, $0018, $0015, $0017, $0014, $0016, $0013, $0015, $0012, $0014, $0011, $0013, $0010, $0012, $0010, $0011, $000f, $0011, $000f, $0010, $000e, $000f, $000d, $000f, $000d, $000e, $000c, $000e, $000c, $000d
	.dw $00d4, $00f6, $008d, $00a4, $006a, $007b, $0055, $0062, $0046, $0052, $003c, $0046, $0035, $003d, $002f, $0036, $002a, $0031, $0026, $002c, $0023, $0028, $0020, $0025, $001e, $0022, $001c, $0020, $001a, $001e, $0018, $001c, $0017, $001a, $0016, $0019, $0014, $0018, $0013, $0016, $0012, $0015, $0012, $0014, $0011, $0013, $0010, $0013, $000f, $0012, $000f, $0011, $000e, $0010, $000e, $0010, $000d, $000f, $000d, $000f, $000c, $000e, $000c, $000e
	.dw $00ce, $00fb, $0089, $00a7, $0067, $007d, $0052, $0064, $0044, $0053, $003a, $0047, $0033, $003e, $002d, $0037, $0029, $0032, $0025, $002d, $0022, $0029, $001f, $0026, $001d, $0023, $001b, $0021, $0019, $001f, $0017, $001d, $0016, $001b, $0015, $001a, $0014, $0018, $0013, $0017, $0012, $0016, $0011, $0015, $0010, $0014, $0010, $0013, $000f, $0012, $000e, $0011, $000e, $0011, $000d, $0010, $000d, $0010, $000c, $000f, $000c, $000e, $000b, $000e
	.dw $00c8, $0100, $0085, $00ab, $0064, $0080, $0050, $0066, $0042, $0055, $0039, $0049, $0031, $0040, $002c, $0038, $0027, $0033, $0024, $002e, $0021, $002a, $001e, $0027, $001c, $0024, $001a, $0021, $0018, $001f, $0017, $001d, $0015, $001c, $0014, $001a, $0013, $0019, $0012, $0017, $0011, $0016, $0010, $0015, $0010, $0014, $000f, $0013, $000e, $0013, $000e, $0012, $000d, $0011, $000d, $0010, $000c, $0010, $000c, $000f, $000b, $000f, $000b, $000e
	.dw $00c2, $0105, $0081, $00ae, $0061, $0082, $004d, $0068, $0040, $0057, $0037, $004a, $0030, $0041, $002a, $0039, $0026, $0034, $0023, $002f, $0020, $002b, $001d, $0027, $001b, $0025, $0019, $0022, $0017, $0020, $0016, $001e, $0015, $001c, $0014, $001b, $0013, $0019, $0012, $0018, $0011, $0017, $0010, $0016, $000f, $0015, $000f, $0014, $000e, $0013, $000d, $0012, $000d, $0011, $000c, $0011, $000c, $0010, $000b, $0010, $000b, $000f, $000b, $000e
	.dw $00bb, $010a, $007d, $00b1, $005d, $0085, $004a, $006a, $003e, $0058, $0035, $004b, $002e, $0042, $0029, $003a, $0025, $0035, $0021, $0030, $001f, $002c, $001c, $0028, $001a, $0025, $0018, $0023, $0017, $0020, $0015, $001e, $0014, $001d, $0013, $001b, $0012, $001a, $0011, $0018, $0010, $0017, $000f, $0016, $000f, $0015, $000e, $0014, $000d, $0013, $000d, $0013, $000c, $0012, $000c, $0011, $000b, $0010, $000b, $0010, $000b, $000f, $000a, $000f
	.dw $00b5, $010e, $0078, $00b4, $005a, $0087, $0048, $006c, $003c, $005a, $0033, $004d, $002d, $0043, $0028, $003b, $0024, $0035, $0020, $0030, $001d, $002c, $001b, $0029, $0019, $0026, $0017, $0023, $0016, $0021, $0014, $001f, $0013, $001d, $0012, $001c, $0011, $001a, $0010, $0019, $0010, $0018, $000f, $0016, $000e, $0015, $000e, $0014, $000d, $0014, $000c, $0013, $000c, $0012, $000b, $0011, $000b, $0011, $000b, $0010, $000a, $0010, $000a, $000f
	.dw $00ae, $0113, $0074, $00b7, $0057, $0089, $0045, $006e, $003a, $005b, $0031, $004e, $002b, $0044, $0026, $003c, $0022, $0036, $001f, $0031, $001c, $002d, $001a, $002a, $0018, $0026, $0016, $0024, $0015, $0021, $0014, $001f, $0013, $001e, $0012, $001c, $0011, $001a, $0010, $0019, $000f, $0018, $000e, $0017, $000e, $0016, $000d, $0015, $000c, $0014, $000c, $0013, $000b, $0012, $000b, $0012, $000b, $0011, $000a, $0010, $000a, $0010, $0009, $000f
	.dw $00a7, $0117, $006f, $00ba, $0053, $008b, $0042, $006f, $0037, $005d, $002f, $004f, $0029, $0045, $0025, $003d, $0021, $0037, $001e, $0032, $001b, $002e, $0019, $002a, $0017, $0027, $0016, $0024, $0014, $0022, $0013, $0020, $0012, $001e, $0011, $001c, $0010, $001b, $000f, $001a, $000e, $0018, $000e, $0017, $000d, $0016, $000c, $0015, $000c, $0014, $000b, $0013, $000b, $0013, $000b, $0012, $000a, $0011, $000a, $0011, $0009, $0010, $0009, $0010
	.dw $00a0, $011b, $006b, $00bc, $0050, $008d, $0040, $0071, $0035, $005e, $002d, $0050, $0028, $0046, $0023, $003e, $001f, $0038, $001d, $0033, $001a, $002e, $0018, $002b, $0016, $0028, $0015, $0025, $0013, $0022, $0012, $0020, $0011, $001e, $0010, $001d, $000f, $001b, $000e, $001a, $000e, $0019, $000d, $0018, $000c, $0016, $000c, $0015, $000b, $0015, $000b, $0014, $000b, $0013, $000a, $0012, $000a, $0012, $0009, $0011, $0009, $0010, $0009, $0010
	.dw $0099, $011f, $0066, $00bf, $004c, $008f, $003d, $0072, $0033, $005f, $002b, $0051, $0026, $0047, $0022, $003f, $001e, $0039, $001b, $0033, $0019, $002f, $0017, $002b, $0015, $0028, $0014, $0025, $0012, $0023, $0011, $0021, $0010, $001f, $000f, $001d, $000f, $001c, $000e, $001a, $000d, $0019, $000d, $0018, $000c, $0017, $000b, $0016, $000b, $0015, $000a, $0014, $000a, $0013, $000a, $0012, $0009, $0012, $0009, $0011, $0009, $0011, $0008, $0010
	.dw $0092, $0123, $0061, $00c2, $0049, $0091, $003a, $0074, $0030, $0060, $0029, $0052, $0024, $0048, $0020, $0040, $001d, $0039, $001a, $0034, $0018, $0030, $0016, $002c, $0014, $0029, $0013, $0026, $0012, $0023, $0010, $0021, $0010, $001f, $000f, $001e, $000e, $001c, $000d, $001b, $000c, $0019, $000c, $0018, $000b, $0017, $000b, $0016, $000a, $0015, $000a, $0014, $000a, $0013, $0009, $0013, $0009, $0012, $0008, $0011, $0008, $0011, $0008, $0010
	.dw $008b, $0126, $005c, $00c4, $0045, $0093, $0037, $0075, $002e, $0062, $0027, $0053, $0022, $0049, $001e, $0041, $001b, $003a, $0019, $0035, $0017, $0030, $0015, $002c, $0013, $0029, $0012, $0026, $0011, $0024, $0010, $0022, $000f, $0020, $000e, $001e, $000d, $001c, $000c, $001b, $000c, $001a, $000b, $0018, $000b, $0017, $000a, $0016, $000a, $0015, $0009, $0015, $0009, $0014, $0009, $0013, $0008, $0012, $0008, $0012, $0008, $0011, $0007, $0010
	.dw $0084, $0129, $0058, $00c6, $0041, $0094, $0034, $0077, $002b, $0063, $0025, $0054, $0020, $004a, $001d, $0041, $001a, $003b, $0017, $0035, $0015, $0031, $0014, $002d, $0012, $002a, $0011, $0027, $0010, $0024, $000f, $0022, $000e, $0020, $000d, $001e, $000c, $001d, $000c, $001b, $000b, $001a, $000b, $0019, $000a, $0018, $000a, $0017, $0009, $0016, $0009, $0015, $0009, $0014, $0008, $0013, $0008, $0012, $0008, $0012, $0007, $0011, $0007, $0011
	.dw $007c, $012d, $0053, $00c8, $003e, $0096, $0031, $0078, $0029, $0064, $0023, $0055, $001f, $004b, $001b, $0042, $0018, $003b, $0016, $0036, $0014, $0031, $0013, $002d, $0011, $002a, $0010, $0027, $000f, $0025, $000e, $0022, $000d, $0020, $000c, $001f, $000c, $001d, $000b, $001c, $000b, $001a, $000a, $0019, $000a, $0018, $0009, $0017, $0009, $0016, $0008, $0015, $0008, $0014, $0008, $0013, $0007, $0013, $0007, $0012, $0007, $0011, $0007, $0011
	.dw $0075, $0130, $004e, $00ca, $003a, $0097, $002e, $0079, $0027, $0065, $0021, $0056, $001d, $004b, $0019, $0043, $0017, $003c, $0015, $0036, $0013, $0032, $0011, $002e, $0010, $002b, $000f, $0028, $000e, $0025, $000d, $0023, $000c, $0021, $000c, $001f, $000b, $001d, $000a, $001c, $000a, $001a, $0009, $0019, $0009, $0018, $0009, $0017, $0008, $0016, $0008, $0015, $0008, $0014, $0007, $0014, $0007, $0013, $0007, $0012, $0006, $0012, $0006, $0011
	.dw $006d, $0132, $0049, $00cc, $0036, $0099, $002b, $007a, $0024, $0066, $001f, $0057, $001b, $004c, $0018, $0043, $0015, $003d, $0013, $0037, $0012, $0032, $0010, $002e, $000f, $002b, $000e, $0028, $000d, $0025, $000c, $0023, $000c, $0021, $000b, $001f, $000a, $001e, $000a, $001c, $0009, $001b, $0009, $0019, $0008, $0018, $0008, $0017, $0008, $0016, $0007, $0015, $0007, $0015, $0007, $0014, $0006, $0013, $0006, $0012, $0006, $0012, $0006, $0011
	.dw $0066, $0135, $0044, $00ce, $0033, $009a, $0028, $007b, $0022, $0066, $001d, $0058, $0019, $004d, $0016, $0044, $0014, $003d, $0012, $0037, $0010, $0033, $000f, $002f, $000e, $002b, $000d, $0028, $000c, $0026, $000b, $0023, $000b, $0021, $000a, $001f, $000a, $001e, $0009, $001c, $0009, $001b, $0008, $001a, $0008, $0019, $0007, $0017, $0007, $0016, $0007, $0016, $0007, $0015, $0006, $0014, $0006, $0013, $0006, $0012, $0006, $0012, $0005, $0011
	.dw $005e, $0137, $003f, $00cf, $002f, $009b, $0025, $007c, $001f, $0067, $001a, $0058, $0017, $004d, $0014, $0045, $0012, $003e, $0011, $0038, $000f, $0033, $000e, $002f, $000d, $002c, $000c, $0029, $000b, $0026, $000a, $0024, $000a, $0022, $0009, $0020, $0009, $001e, $0008, $001d, $0008, $001b, $0008, $001a, $0007, $0019, $0007, $0018, $0007, $0017, $0006, $0016, $0006, $0015, $0006, $0014, $0006, $0013, $0005, $0013, $0005, $0012, $0005, $0011
	.dw $0056, $013a, $0039, $00d1, $002b, $009c, $0022, $007d, $001c, $0068, $0018, $0059, $0015, $004e, $0013, $0045, $0011, $003e, $000f, $0038, $000e, $0033, $000d, $002f, $000c, $002c, $000b, $0029, $000a, $0026, $000a, $0024, $0009, $0022, $0008, $0020, $0008, $001e, $0008, $001d, $0007, $001b, $0007, $001a, $0007, $0019, $0006, $0018, $0006, $0017, $0006, $0016, $0005, $0015, $0005, $0014, $0005, $0013, $0005, $0013, $0005, $0012, $0004, $0011
	.dw $004f, $013c, $0034, $00d2, $0027, $009d, $001f, $007e, $001a, $0069, $0016, $005a, $0013, $004e, $0011, $0045, $000f, $003e, $000e, $0039, $000d, $0034, $000c, $0030, $000b, $002c, $000a, $0029, $0009, $0027, $0009, $0024, $0008, $0022, $0008, $0020, $0007, $001e, $0007, $001d, $0007, $001c, $0006, $001a, $0006, $0019, $0006, $0018, $0005, $0017, $0005, $0016, $0005, $0015, $0005, $0014, $0005, $0014, $0004, $0013, $0004, $0012, $0004, $0012
	.dw $0047, $013d, $002f, $00d3, $0023, $009e, $001c, $007f, $0017, $0069, $0014, $005a, $0011, $004f, $000f, $0046, $000e, $003f, $000c, $0039, $000b, $0034, $000a, $0030, $000a, $002c, $0009, $0029, $0008, $0027, $0008, $0024, $0007, $0022, $0007, $0020, $0006, $001f, $0006, $001d, $0006, $001c, $0006, $001a, $0005, $0019, $0005, $0018, $0005, $0017, $0005, $0016, $0004, $0015, $0004, $0014, $0004, $0014, $0004, $0013, $0004, $0012, $0004, $0012
	.dw $003f, $013f, $002a, $00d5, $001f, $009f, $0019, $007f, $0015, $006a, $0012, $005b, $000f, $004f, $000e, $0046, $000c, $003f, $000b, $0039, $000a, $0034, $0009, $0030, $0008, $002d, $0008, $002a, $0007, $0027, $0007, $0025, $0006, $0022, $0006, $0021, $0006, $001f, $0005, $001d, $0005, $001c, $0005, $001b, $0005, $0019, $0004, $0018, $0004, $0017, $0004, $0016, $0004, $0015, $0004, $0015, $0004, $0014, $0003, $0013, $0003, $0012, $0003, $0012
	.dw $0037, $0141, $0025, $00d6, $001b, $00a0, $0016, $0080, $0012, $006a, $000f, $005b, $000d, $0050, $000c, $0047, $000b, $003f, $000a, $003a, $0009, $0035, $0008, $0030, $0007, $002d, $0007, $002a, $0006, $0027, $0006, $0025, $0006, $0023, $0005, $0021, $0005, $001f, $0005, $001d, $0004, $001c, $0004, $001b, $0004, $0019, $0004, $0018, $0004, $0017, $0003, $0016, $0003, $0016, $0003, $0015, $0003, $0014, $0003, $0013, $0003, $0013, $0003, $0012
	.dw $002f, $0142, $001f, $00d6, $0017, $00a1, $0013, $0080, $000f, $006b, $000d, $005b, $000b, $0050, $000a, $0047, $0009, $0040, $0008, $003a, $0007, $0035, $0007, $0031, $0006, $002d, $0006, $002a, $0005, $0027, $0005, $0025, $0005, $0023, $0004, $0021, $0004, $001f, $0004, $001e, $0004, $001c, $0004, $001b, $0003, $001a, $0003, $0018, $0003, $0017, $0003, $0017, $0003, $0016, $0003, $0015, $0003, $0014, $0002, $0013, $0002, $0013, $0002, $0012
	.dw $0027, $0143, $001a, $00d7, $0013, $00a1, $000f, $0081, $000d, $006b, $000b, $005c, $0009, $0050, $0008, $0047, $0007, $0040, $0007, $003a, $0006, $0035, $0006, $0031, $0005, $002d, $0005, $002a, $0004, $0027, $0004, $0025, $0004, $0023, $0004, $0021, $0003, $001f, $0003, $001e, $0003, $001c, $0003, $001b, $0003, $001a, $0003, $0019, $0002, $0018, $0002, $0017, $0002, $0016, $0002, $0015, $0002, $0014, $0002, $0013, $0002, $0013, $0002, $0012
	.dw $001f, $0144, $0015, $00d8, $000f, $00a2, $000c, $0081, $000a, $006b, $0009, $005c, $0007, $0050, $0007, $0047, $0006, $0040, $0005, $003a, $0005, $0035, $0004, $0031, $0004, $002d, $0004, $002a, $0003, $0028, $0003, $0025, $0003, $0023, $0003, $0021, $0003, $001f, $0002, $001e, $0002, $001c, $0002, $001b, $0002, $001a, $0002, $0019, $0002, $0018, $0002, $0017, $0002, $0016, $0002, $0015, $0002, $0014, $0001, $0013, $0001, $0013, $0001, $0012
	.dw $0017, $0145, $000f, $00d8, $000b, $00a2, $0009, $0081, $0007, $006c, $0006, $005c, $0005, $0051, $0005, $0047, $0004, $0040, $0004, $003a, $0003, $0035, $0003, $0031, $0003, $002d, $0003, $002a, $0002, $0028, $0002, $0025, $0002, $0023, $0002, $0021, $0002, $001f, $0002, $001e, $0002, $001c, $0002, $001b, $0001, $001a, $0001, $0019, $0001, $0018, $0001, $0017, $0001, $0016, $0001, $0015, $0001, $0014, $0001, $0013, $0001, $0013, $0001, $0012
	.dw $000f, $0145, $000a, $00d8, $0007, $00a2, $0006, $0082, $0005, $006c, $0004, $005c, $0003, $0051, $0003, $0048, $0003, $0040, $0002, $003a, $0002, $0035, $0002, $0031, $0002, $002e, $0002, $002a, $0001, $0028, $0001, $0025, $0001, $0023, $0001, $0021, $0001, $001f, $0001, $001e, $0001, $001c, $0001, $001b, $0001, $001a, $0001, $0019, $0001, $0018, $0001, $0017, $0001, $0016, $0001, $0015, $0001, $0014, $0000, $0013, $0000, $0013, $0000, $0012
	.dw $0007, $0145, $0005, $00d9, $0003, $00a2, $0003, $0082, $0002, $006c, $0002, $005c, $0001, $0051, $0001, $0048, $0001, $0040, $0001, $003a, $0001, $0035, $0001, $0031, $0001, $002e, $0001, $002a, $0000, $0028, $0000, $0025, $0000, $0023, $0000, $0021, $0000, $001f, $0000, $001e, $0000, $001c, $0000, $001b, $0000, $001a, $0000, $0019, $0000, $0018, $0000, $0017, $0000, $0016, $0000, $0015, $0000, $0014, $0000, $0013, $0000, $0013, $0000, $0012
	.dw $0000, $0145, $0000, $00d9, $0000, $00a2, $0000, $0082, $0000, $006c, $0000, $005c, $0000, $0051, $0000, $0048, $0000, $0040, $0000, $003a, $0000, $0035, $0000, $0031, $0000, $002e, $0000, $002a, $0000, $0028, $0000, $0025, $0000, $0023, $0000, $0021, $0000, $001f, $0000, $001e, $0000, $001c, $0000, $001b, $0000, $001a, $0000, $0019, $0000, $0018, $0000, $0017, $0000, $0016, $0000, $0015, $0000, $0014, $0000, $0014, $0000, $0013, $0000, $0012
; }
distortionCorrect_table:	; {
	.db -1, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 18, 19, 20, 21, 21
	.db -1, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22
	.db -1, 0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23
	.db -1, 0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 21, 22, 23
	.db -1, 0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24
	.db -1, 0, 1, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 22, 23, 24
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 25
	.db -1, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26
	.db -1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26
	.db -1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	.db -1, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27
	.db -1, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26
	.db -1, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 25
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25
	.db -1, 0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25
	.db -1, 0, 1, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 22, 23, 24
	.db -1, 0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24
	.db -1, 0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 21, 22, 23
	.db -1, 0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23
	.db -1, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22
; }
	
	
; }




; Audio Stuff
.org $+4000h

; {
mario:
mario_left:
	.db $E9, $FC, $17		; cycle  2 -1 1 -2
	.db $13, $3B		; play 391.9954359817492 19
	.db $01, $00		; play 0 1
	.db $04, $3B		; play 391.9954359817492 4
	.db $02, $00		; play 0 2
	.db $05, $3B		; play 391.9954359817492 5
	.db $02, $00		; play 0 2
	.db $05, $3B		; play 391.9954359817492 5
	.db $09, $00		; play 0 9
	.db $04, $3B		; play 391.9954359817492 4
	.db $02, $00		; play 0 2
	.db $12, $3B		; play 391.9954359817492 18
	.db $12, $36		; play 415.3046975799452 18
	.db $12, $31		; play 440.0 18
	.db $14, $2D		; play 466.1637615180898 20
	.db $05, $2D		; play 466.1637615180898 5
	.db $09, $00		; play 0 9
	.db $04, $2D		; play 466.1637615180898 4
	.db $09, $00		; play 0 9
	.db $05, $2D		; play 466.1637615180898 5
	.db $02, $00		; play 0 2
	.db $16, $2D		; play 466.1637615180898 22
	.db $3A, $00		; play 0 58
	.db $E9, $FC, $17		; cycle  2 -1 1 -2
	.db $0E, $3B		; play 391.9954359817492 14
	.db $0D, $31		; play 440.0 13
	.db $13, $40		; play 369.9944227116344 19
	.db $01, $00		; play 0 1
	.db $01, $7C		; play 220.0 1
	.db $06, $57		; play 293.66476791740763 6
	.db $0E, $00		; play 0 14
	.db $0D, $4A		; play 329.62755691286986 13
	.db $1B, $00		; play 0 27
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0E, $31		; play 440.0 14
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $31		; play 440.0 7
	.db $0D, $00		; play 0 13
	.db $0D, $29		; play 493.88330125612424 13
	.db $1B, $00		; play 0 27
	.db $0E, $45		; play 349.22823143300394 14
	.db $0D, $3B		; play 391.9954359817492 13
	.db $14, $4A		; play 329.62755691286986 20
	.db $01, $00		; play 0 1
	.db $06, $64		; play 261.6255653005986 6
	.db $0E, $00		; play 0 14
	.db $0D, $57		; play 293.66476791740763 13
	.db $1B, $00		; play 0 27
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $0D, $16		; play 698.4564628660079 13
	.db $01, $1F		; play 587.3295358348153 1
	.db $0D, $11		; play 783.9908719634984 13
	.db $12, $19		; play 659.2551138257397 18
	.db $11, $16		; play 698.4564628660079 17
	.db $01, $00		; play 0 1
	.db $11, $13		; play 739.9888454232688 17
	.db $1C, $00		; play 0 28
	.db $E9, $FC, $17		; cycle  2 -1 1 -2
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0D, $31		; play 440.0 13
	.db $14, $40		; play 369.9944227116344 20
	.db $01, $00		; play 0 1
	.db $06, $57		; play 293.66476791740763 6
	.db $0E, $00		; play 0 14
	.db $0D, $4A		; play 329.62755691286986 13
	.db $1B, $00		; play 0 27
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0E, $31		; play 440.0 14
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $31		; play 440.0 7
	.db $0D, $00		; play 0 13
	.db $0D, $29		; play 493.88330125612424 13
	.db $1C, $00		; play 0 28
	.db $0D, $45		; play 349.22823143300394 13
	.db $0D, $3B		; play 391.9954359817492 13
	.db $14, $4A		; play 329.62755691286986 20
	.db $01, $00		; play 0 1
	.db $06, $64		; play 261.6255653005986 6
	.db $0E, $00		; play 0 14
	.db $0D, $57		; play 293.66476791740763 13
	.db $1B, $00		; play 0 27
	.db $0D, $45		; play 349.22823143300394 13
	.db $01, $00		; play 0 1
	.db $0D, $3B		; play 391.9954359817492 13
	.db $16, $31		; play 440.0 22
	.db $05, $00		; play 0 5
	.db $16, $31		; play 440.0 22
	.db $20, $00		; play 0 32
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $45		; play 349.22823143300394 13
	.db $14, $3B		; play 391.9954359817492 20
	.db $01, $00		; play 0 1
	.db $05, $1F		; play 587.3295358348153 5
	.db $0F, $00		; play 0 15
	.db $24, $26		; play 523.2511306011972 36
	.db $04, $00		; play 0 4
	.db $0D, $64		; play 261.6255653005986 13
	.db $01, $00		; play 0 1
	.db $0D, $45		; play 349.22823143300394 13
	.db $14, $2D		; play 466.1637615180898 20
	.db $07, $26		; play 523.2511306011972 7
	.db $0D, $00		; play 0 13
	.db $24, $31		; play 440.0 36
	.db $05, $00		; play 0 5
	.db $0D, $31		; play 440.0 13
	.db $0D, $26		; play 523.2511306011972 13
	.db $01, $00		; play 0 1
	.db $13, $11		; play 783.9908719634984 19
	.db $01, $00		; play 0 1
	.db $06, $16		; play 698.4564628660079 6
	.db $0E, $00		; play 0 14
	.db $14, $06		; play 1046.5022612023945 20
	.db $04, $03		; play 1174.6590716696305 4
	.db $03, $00		; play 0 3
	.db $04, $06		; play 1046.5022612023945 4
	.db $02, $00		; play 0 2
	.db $05, $16		; play 698.4564628660079 5
	.db $02, $00		; play 0 2
	.db $05, $06		; play 1046.5022612023945 5
	.db $02, $00		; play 0 2
	.db $04, $0A		; play 932.3275230361796 4
	.db $03, $00		; play 0 3
	.db $04, $16		; play 698.4564628660079 4
	.db $02, $00		; play 0 2
	.db $05, $26		; play 523.2511306011972 5
	.db $02, $00		; play 0 2
	.db $05, $1F		; play 587.3295358348153 5
	.db $02, $00		; play 0 2
	.db $04, $26		; play 523.2511306011972 4
	.db $02, $00		; play 0 2
	.db $05, $2D		; play 466.1637615180898 5
	.db $02, $00		; play 0 2
	.db $05, $45		; play 349.22823143300394 5
	.db $02, $00		; play 0 2
	.db $04, $2D		; play 466.1637615180898 4
	.db $03, $00		; play 0 3
	.db $04, $31		; play 440.0 4
	.db $02, $00		; play 0 2
	.db $05, $45		; play 349.22823143300394 5
	.db $02, $00		; play 0 2
	.db $05, $64		; play 261.6255653005986 5
	.db $1D, $00		; play 0 29
	.db $0D, $57		; play 293.66476791740763 13
	.db $0D, $45		; play 349.22823143300394 13
	.db $01, $00		; play 0 1
	.db $13, $2D		; play 466.1637615180898 19
	.db $01, $00		; play 0 1
	.db $06, $26		; play 523.2511306011972 6
	.db $0E, $00		; play 0 14
	.db $1A, $31		; play 440.0 26
	.db $01, $00		; play 0 1
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $01, $00		; play 0 1
	.db $0D, $45		; play 349.22823143300394 13
	.db $14, $3B		; play 391.9954359817492 20
	.db $07, $1F		; play 587.3295358348153 7
	.db $0D, $00		; play 0 13
	.db $32, $26		; play 523.2511306011972 50
	.db $04, $00		; play 0 4
	.db $05, $45		; play 349.22823143300394 5
	.db $02, $00		; play 0 2
	.db $04, $3B		; play 391.9954359817492 4
	.db $03, $00		; play 0 3
	.db $0D, $26		; play 523.2511306011972 13
	.db $05, $31		; play 440.0 5
	.db $02, $00		; play 0 2
	.db $04, $26		; play 523.2511306011972 4
	.db $02, $00		; play 0 2
	.db $0E, $19		; play 659.2551138257397 14
	.db $04, $1F		; play 587.3295358348153 4
	.db $03, $00		; play 0 3
	.db $04, $19		; play 659.2551138257397 4
	.db $13, $00		; play 0 19
	.db $14, $16		; play 698.4564628660079 20
	.db $11, $1C		; play 622.2539674441618 17
	.db $14, $26		; play 523.2511306011972 20
	.db $07, $26		; play 523.2511306011972 7
	.db $0D, $00		; play 0 13
	.db $22, $26		; play 523.2511306011972 34
	.db $06, $26		; play 523.2511306011972 6
	.db $01, $00		; play 0 1
	.db $04, $26		; play 523.2511306011972 4
	.db $02, $00		; play 0 2
	.db $05, $26		; play 523.2511306011972 5
	.db $09, $00		; play 0 9
	.db $04, $26		; play 523.2511306011972 4
	.db $03, $00		; play 0 3
	.db $11, $26		; play 523.2511306011972 17
	.db $01, $00		; play 0 1
	.db $11, $22		; play 554.3652619537442 17
	.db $12, $1F		; play 587.3295358348153 18
	.db $14, $1C		; play 622.2539674441618 20
	.db $01, $00		; play 0 1
	.db $04, $1C		; play 622.2539674441618 4
	.db $09, $00		; play 0 9
	.db $14, $1C		; play 622.2539674441618 20
	.db $05, $19		; play 659.2551138257397 5
	.db $02, $00		; play 0 2
	.db $04, $19		; play 659.2551138257397 4
	.db $09, $00		; play 0 9
	.db $05, $19		; play 659.2551138257397 5
	.db $09, $00		; play 0 9
	.db $14, $19		; play 659.2551138257397 20
	.db $1B, $00		; play 0 27
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0D, $31		; play 440.0 13
	.db $01, $00		; play 0 1
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $57		; play 293.66476791740763 7
	.db $0D, $00		; play 0 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $1B, $00		; play 0 27
	.db $0D, $3B		; play 391.9954359817492 13
	.db $01, $00		; play 0 1
	.db $0D, $31		; play 440.0 13
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $31		; play 440.0 7
	.db $0E, $00		; play 0 14
	.db $0D, $29		; play 493.88330125612424 13
	.db $1B, $00		; play 0 27
	.db $0D, $45		; play 349.22823143300394 13
	.db $0D, $3B		; play 391.9954359817492 13
	.db $01, $00		; play 0 1
	.db $14, $4A		; play 329.62755691286986 20
	.db $07, $64		; play 261.6255653005986 7
	.db $0D, $00		; play 0 13
	.db $0D, $57		; play 293.66476791740763 13
	.db $1B, $00		; play 0 27
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $0E, $16		; play 698.4564628660079 14
	.db $0D, $11		; play 783.9908719634984 13
	.db $12, $19		; play 659.2551138257397 18
	.db $12, $16		; play 698.4564628660079 18
	.db $12, $13		; play 739.9888454232688 18
	.db $1B, $00		; play 0 27
	.db $E9, $FC, $17		; cycle  2 -1 1 -2
	.db $0D, $3B		; play 391.9954359817492 13
	.db $0D, $31		; play 440.0 13
	.db $01, $00		; play 0 1
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $57		; play 293.66476791740763 7
	.db $0D, $00		; play 0 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $1B, $00		; play 0 27
	.db $0E, $3B		; play 391.9954359817492 14
	.db $0D, $31		; play 440.0 13
	.db $14, $40		; play 369.9944227116344 20
	.db $07, $31		; play 440.0 7
	.db $0E, $00		; play 0 14
	.db $0D, $29		; play 493.88330125612424 13
	.db $1B, $00		; play 0 27
	.db $0D, $45		; play 349.22823143300394 13
	.db $0E, $3B		; play 391.9954359817492 14
	.db $14, $4A		; play 329.62755691286986 20
	.db $07, $64		; play 261.6255653005986 7
	.db $0D, $00		; play 0 13
	.db $0D, $57		; play 293.66476791740763 13
	.db $1B, $00		; play 0 27
	.db $0E, $45		; play 349.22823143300394 14
	.db $0D, $3B		; play 391.9954359817492 13
	.db $17, $31		; play 440.0 23
	.db $04, $00		; play 0 4
	.db $17, $31		; play 440.0 23
	.db $1F, $00		; play 0 31
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0E, $45		; play 349.22823143300394 14
	.db $14, $3B		; play 391.9954359817492 20
	.db $07, $1F		; play 587.3295358348153 7
	.db $0D, $00		; play 0 13
	.db $24, $26		; play 523.2511306011972 36
	.db $04, $00		; play 0 4
	.db $0E, $64		; play 261.6255653005986 14
	.db $0D, $45		; play 349.22823143300394 13
	.db $14, $2D		; play 466.1637615180898 20
	.db $01, $00		; play 0 1
	.db $06, $26		; play 523.2511306011972 6
	.db $0E, $00		; play 0 14
	.db $24, $31		; play 440.0 36
	.db $04, $00		; play 0 4
	.db $0D, $31		; play 440.0 13
	.db $0E, $26		; play 523.2511306011972 14
	.db $14, $11		; play 783.9908719634984 20
	.db $07, $16		; play 698.4564628660079 7
	.db $0D, $00		; play 0 13
	.db $14, $06		; play 1046.5022612023945 20
	.db $05, $03		; play 1174.6590716696305 5
	.db $02, $00		; play 0 2
	.db $05, $06		; play 1046.5022612023945 5
	.db $02, $00		; play 0 2
	.db $04, $16		; play 698.4564628660079 4
	.db $03, $00		; play 0 3
	.db $04, $06		; play 1046.5022612023945 4
	.db $02, $00		; play 0 2
	.db $05, $0A		; play 932.3275230361796 5
	.db $02, $00		; play 0 2
	.db $04, $16		; play 698.4564628660079 4
	.db $03, $00		; play 0 3
	.db $04, $26		; play 523.2511306011972 4
	.db $02, $00		; play 0 2
	.db $05, $1F		; play 587.3295358348153 5
	.db $02, $00		; play 0 2
	.db $05, $26		; play 523.2511306011972 5
	.db $02, $00		; play 0 2
	.db $04, $2D		; play 466.1637615180898 4
	.db $03, $00		; play 0 3
	.db $04, $45		; play 349.22823143300394 4
	.db $02, $00		; play 0 2
	.db $05, $2D		; play 466.1637615180898 5
	.db $02, $00		; play 0 2
	.db $04, $31		; play 440.0 4
	.db $03, $00		; play 0 3
	.db $04, $45		; play 349.22823143300394 4
	.db $02, $00		; play 0 2
	.db $05, $64		; play 261.6255653005986 5
	.db $1D, $00		; play 0 29
	.db $0D, $57		; play 293.66476791740763 13
	.db $0E, $45		; play 349.22823143300394 14
	.db $14, $2D		; play 466.1637615180898 20
	.db $07, $26		; play 523.2511306011972 7
	.db $0D, $00		; play 0 13
	.db $1B, $31		; play 440.0 27
	.db $0D, $3B		; play 391.9954359817492 13
	.db $01, $00		; play 0 1
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $45		; play 349.22823143300394 13
	.db $14, $3B		; play 391.9954359817492 20
	.db $01, $00		; play 0 1
	.db $06, $1F		; play 587.3295358348153 6
	.db $0E, $00		; play 0 14
	.db $31, $26		; play 523.2511306011972 49
	.db $05, $00		; play 0 5
	.db $04, $45		; play 349.22823143300394 4
	.db $02, $00		; play 0 2
	.db $05, $3B		; play 391.9954359817492 5
	.db $02, $00		; play 0 2
	.db $0D, $26		; play 523.2511306011972 13
	.db $05, $31		; play 440.0 5
	.db $02, $00		; play 0 2
	.db $05, $26		; play 523.2511306011972 5
	.db $02, $00		; play 0 2
	.db $0D, $19		; play 659.2551138257397 13
	.db $05, $1F		; play 587.3295358348153 5
	.db $02, $00		; play 0 2
	.db $04, $19		; play 659.2551138257397 4
	.db $14, $00		; play 0 20
	.db $13, $16		; play 698.4564628660079 19
	.db $01, $00		; play 0 1
	.db $10, $1C		; play 622.2539674441618 16
	.db $14, $26		; play 523.2511306011972 20
	.db $01, $00		; play 0 1
	.db $06, $26		; play 523.2511306011972 6
	.db $0E, $00		; play 0 14
	.db $21, $26		; play 523.2511306011972 33
	.db $07, $26		; play 523.2511306011972 7
	.db $05, $26		; play 523.2511306011972 5
	.db $02, $00		; play 0 2
	.db $04, $26		; play 523.2511306011972 4
	.db $09, $00		; play 0 9
	.db $05, $26		; play 523.2511306011972 5
	.db $02, $00		; play 0 2
	.db $12, $26		; play 523.2511306011972 18
	.db $12, $22		; play 554.3652619537442 18
	.db $11, $1F		; play 587.3295358348153 17
	.db $01, $00		; play 0 1
	.db $14, $1C		; play 622.2539674441618 20
	.db $04, $1C		; play 622.2539674441618 4
	.db $09, $00		; play 0 9
	.db $14, $1C		; play 622.2539674441618 20
	.db $01, $00		; play 0 1
	.db $04, $19		; play 659.2551138257397 4
	.db $02, $00		; play 0 2
	.db $05, $19		; play 659.2551138257397 5
	.db $09, $00		; play 0 9
	.db $04, $19		; play 659.2551138257397 4
	.db $09, $00		; play 0 9
	.db $14, $19		; play 659.2551138257397 20
	.db $F4, (mario_left / 256 % 64) + audio_basePtr, mario_left% 256		; jump mario_left
mario_right:
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $13, $C6		; play 97.99885899543733 19
	.db $01, $00		; play 0 1
	.db $04, $C6		; play 97.99885899543733 4
	.db $02, $00		; play 0 2
	.db $05, $C6		; play 97.99885899543733 5
	.db $02, $00		; play 0 2
	.db $05, $C6		; play 97.99885899543733 5
	.db $09, $00		; play 0 9
	.db $04, $C6		; play 97.99885899543733 4
	.db $02, $00		; play 0 2
	.db $12, $C6		; play 97.99885899543733 18
	.db $12, $C0		; play 103.82617439498628 18
	.db $12, $BA		; play 110.0 18
	.db $14, $B5		; play 116.54094037952248 20
	.db $05, $B5		; play 116.54094037952248 5
	.db $09, $00		; play 0 9
	.db $04, $B5		; play 116.54094037952248 4
	.db $09, $00		; play 0 9
	.db $05, $B5		; play 116.54094037952248 5
	.db $02, $00		; play 0 2
	.db $16, $B5		; play 116.54094037952248 22
	.db $05, $00		; play 0 5
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $04, $85		; play 207.65234878997256 4
	.db $04, $00		; play 0 4
	.db $04, $85		; play 207.65234878997256 4
	.db $01, $00		; play 0 1
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $0D, $45		; play 349.22823143300394 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $8E		; play 195.99771799087466 13
	.db $07, $4A		; play 329.62755691286986 7
	.db $03, $8E		; play 195.99771799087466 3
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $09, $00		; play 0 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $4A		; play 329.62755691286986 5
	.db $08, $00		; play 0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $A1		; play 146.83238395870376 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $09, $00		; play 0 9
	.db $05, $4A		; play 329.62755691286986 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $08, $EC		; play 73.41619197935188 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $03, $EC		; play 73.41619197935188 3
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $C6		; play 97.99885899543733 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $8E		; play 195.99771799087466 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AF		; play 123.470825314031 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $06, $4A		; play 329.62755691286986 6
	.db $05, $8E		; play 195.99771799087466 5
	.db $09, $00		; play 0 9
	.db $04, $4A		; play 329.62755691286986 4
	.db $09, $00		; play 0 9
	.db $05, $92		; play 184.9972113558172 5
	.db $08, $00		; play 0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $EC		; play 73.41619197935188 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $4A		; play 329.62755691286986 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $EC		; play 73.41619197935188 2
	.db $01, $00		; play 0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $C6		; play 97.99885899543733 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $96		; play 174.61411571650194 13
	.db $05, $57		; play 293.66476791740763 5
	.db $02, $00		; play 0 2
	.db $04, $96		; play 174.61411571650194 4
	.db $09, $00		; play 0 9
	.db $05, $57		; play 293.66476791740763 5
	.db $08, $00		; play 0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $99		; play 164.813778456435 4
	.db $09, $00		; play 0 9
	.db $05, $57		; play 293.66476791740763 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $FE		; play 65.40639132514966 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $FE		; play 65.40639132514966 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $01, $00		; play 0 1
	.db $0D, $57		; play 293.66476791740763 13
	.db $0D, $96		; play 174.61411571650194 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $57		; play 293.66476791740763 4
	.db $02, $00		; play 0 2
	.db $05, $96		; play 174.61411571650194 5
	.db $09, $00		; play 0 9
	.db $04, $57		; play 293.66476791740763 4
	.db $09, $00		; play 0 9
	.db $05, $99		; play 164.813778456435 5
	.db $08, $00		; play 0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $D4		; play 87.30705785825097 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $D4		; play 87.30705785825097 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $99		; play 164.813778456435 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $D4		; play 87.30705785825097 1
	.db $01, $00		; play 0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $07, $57		; play 293.66476791740763 7
	.db $06, $85		; play 207.65234878997256 6
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $8E		; play 195.99771799087466 13
	.db $07, $4A		; play 329.62755691286986 7
	.db $04, $8E		; play 195.99771799087466 4
	.db $09, $00		; play 0 9
	.db $05, $4A		; play 329.62755691286986 5
	.db $09, $00		; play 0 9
	.db $04, $92		; play 184.9972113558172 4
	.db $09, $00		; play 0 9
	.db $05, $4A		; play 329.62755691286986 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $EC		; play 73.41619197935188 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $01, $00		; play 0 1
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $8E		; play 195.99771799087466 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AF		; play 123.470825314031 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $06, $4A		; play 329.62755691286986 6
	.db $05, $8E		; play 195.99771799087466 5
	.db $09, $00		; play 0 9
	.db $04, $4A		; play 329.62755691286986 4
	.db $09, $00		; play 0 9
	.db $05, $92		; play 184.9972113558172 5
	.db $08, $00		; play 0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $EC		; play 73.41619197935188 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $4A		; play 329.62755691286986 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $92		; play 184.9972113558172 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $EC		; play 73.41619197935188 1
	.db $01, $00		; play 0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $01, $00		; play 0 1
	.db $0D, $96		; play 174.61411571650194 13
	.db $05, $57		; play 293.66476791740763 5
	.db $02, $00		; play 0 2
	.db $04, $96		; play 174.61411571650194 4
	.db $09, $00		; play 0 9
	.db $05, $57		; play 293.66476791740763 5
	.db $09, $00		; play 0 9
	.db $04, $99		; play 164.813778456435 4
	.db $09, $00		; play 0 9
	.db $05, $57		; play 293.66476791740763 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $FE		; play 65.40639132514966 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $FE		; play 65.40639132514966 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $01, $00		; play 0 1
	.db $0D, $57		; play 293.66476791740763 13
	.db $0D, $96		; play 174.61411571650194 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $57		; play 293.66476791740763 4
	.db $02, $00		; play 0 2
	.db $05, $96		; play 174.61411571650194 5
	.db $09, $00		; play 0 9
	.db $04, $57		; play 293.66476791740763 4
	.db $09, $00		; play 0 9
	.db $05, $99		; play 164.813778456435 5
	.db $09, $00		; play 0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $13, $D4		; play 87.30705785825097 19
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $01, $45		; play 349.22823143300394 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $C6		; play 97.99885899543733 13
	.db $0D, $AA		; play 130.8127826502993 13
	.db $01, $00		; play 0 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $04, $C6		; play 97.99885899543733 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $03, $7C		; play 220.0 3
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $08, $7C		; play 220.0 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $06, $8E		; play 195.99771799087466 6
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $7C		; play 220.0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $96		; play 174.61411571650194 4
	.db $02, $00		; play 0 2
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $8E		; play 195.99771799087466 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $AA		; play 130.8127826502993 20
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $C6		; play 97.99885899543733 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $8E		; play 195.99771799087466 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $16, $8E		; play 195.99771799087466 22
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $09, $00		; play 0 9
	.db $13, $AA		; play 130.8127826502993 19
	.db $01, $00		; play 0 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $01, $00		; play 0 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $05, $C6		; play 97.99885899543733 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $7C		; play 220.0 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $7C		; play 220.0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $8E		; play 195.99771799087466 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $7C		; play 220.0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $96		; play 174.61411571650194 4
	.db $03, $00		; play 0 3
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $06, $8E		; play 195.99771799087466 6
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $AA		; play 130.8127826502993 20
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $C6		; play 97.99885899543733 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $8E		; play 195.99771799087466 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $16, $8E		; play 195.99771799087466 22
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $02, $00		; play 0 2
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $96		; play 174.61411571650194 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $13, $AA		; play 130.8127826502993 19
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $96		; play 174.61411571650194 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $01, $45		; play 349.22823143300394 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $C6		; play 97.99885899543733 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $B5		; play 116.54094037952248 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $99		; play 164.813778456435 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $C0		; play 103.82617439498628 20
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $0E, $B5		; play 116.54094037952248 14
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $AF		; play 123.470825314031 13
	.db $0D, $AA		; play 130.8127826502993 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $B5		; play 116.54094037952248 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $B5		; play 116.54094037952248 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $37, $B5		; play 116.54094037952248 55
	.db $01, $00		; play 0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $BA		; play 110.0 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $AA		; play 130.8127826502993 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $8E		; play 195.99771799087466 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $BA		; play 110.0 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $BA		; play 110.0 20
	.db $0D, $BA		; play 110.0 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $AA		; play 130.8127826502993 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $BA		; play 110.0 13
	.db $0D, $C0		; play 103.82617439498628 13
	.db $01, $00		; play 0 1
	.db $04, $9D		; play 155.56349186104046 4
	.db $02, $00		; play 0 2
	.db $05, $74		; play 233.0818807590449 5
	.db $09, $00		; play 0 9
	.db $04, $5D		; play 277.1826309768721 4
	.db $09, $00		; play 0 9
	.db $05, $64		; play 261.6255653005986 5
	.db $09, $00		; play 0 9
	.db $14, $9D		; play 155.56349186104046 20
	.db $0D, $AA		; play 130.8127826502993 13
	.db $0D, $B5		; play 116.54094037952248 13
	.db $01, $00		; play 0 1
	.db $14, $C6		; play 97.99885899543733 20
	.db $04, $C6		; play 97.99885899543733 4
	.db $03, $00		; play 0 3
	.db $04, $C6		; play 97.99885899543733 4
	.db $02, $00		; play 0 2
	.db $05, $C6		; play 97.99885899543733 5
	.db $09, $00		; play 0 9
	.db $04, $C6		; play 97.99885899543733 4
	.db $02, $00		; play 0 2
	.db $12, $C6		; play 97.99885899543733 18
	.db $12, $C0		; play 103.82617439498628 18
	.db $12, $BA		; play 110.0 18
	.db $14, $B5		; play 116.54094037952248 20
	.db $05, $B5		; play 116.54094037952248 5
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $02, $45		; play 349.22823143300394 2
	.db $07, $45		; play 349.22823143300394 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $B5		; play 116.54094037952248 20
	.db $04, $AF		; play 123.470825314031 4
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $03, $45		; play 349.22823143300394 3
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AF		; play 123.470825314031 4
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $09, $45		; play 349.22823143300394 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AF		; play 123.470825314031 5
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $02, $45		; play 349.22823143300394 2
	.db $06, $45		; play 349.22823143300394 6
	.db $01, $00		; play 0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $DC		; play 82.4068892282175 20
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $8E		; play 195.99771799087466 13
	.db $07, $4A		; play 329.62755691286986 7
	.db $05, $8E		; play 195.99771799087466 5
	.db $09, $00		; play 0 9
	.db $04, $4A		; play 329.62755691286986 4
	.db $09, $00		; play 0 9
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $A1		; play 146.83238395870376 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $4A		; play 329.62755691286986 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $03, $EC		; play 73.41619197935188 3
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0E, $8E		; play 195.99771799087466 14
	.db $06, $4A		; play 329.62755691286986 6
	.db $01, $00		; play 0 1
	.db $04, $8E		; play 195.99771799087466 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $4A		; play 329.62755691286986 5
	.db $08, $00		; play 0 8
	.db $05, $92		; play 184.9972113558172 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $A1		; play 146.83238395870376 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $4A		; play 329.62755691286986 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $92		; play 184.9972113558172 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $EC		; play 73.41619197935188 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $DC		; play 82.4068892282175 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $96		; play 174.61411571650194 13
	.db $05, $57		; play 293.66476791740763 5
	.db $02, $00		; play 0 2
	.db $05, $96		; play 174.61411571650194 5
	.db $09, $00		; play 0 9
	.db $04, $57		; play 293.66476791740763 4
	.db $09, $00		; play 0 9
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $57		; play 293.66476791740763 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $FE		; play 65.40639132514966 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $03, $FE		; play 65.40639132514966 3
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $0D, $57		; play 293.66476791740763 13
	.db $0E, $96		; play 174.61411571650194 14
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $02, $00		; play 0 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $96		; play 174.61411571650194 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $B5		; play 116.54094037952248 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $57		; play 293.66476791740763 5
	.db $09, $00		; play 0 9
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $D4		; play 87.30705785825097 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $99		; play 164.813778456435 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $D4		; play 87.30705785825097 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $C6		; play 97.99885899543733 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $06, $57		; play 293.66476791740763 6
	.db $07, $85		; play 207.65234878997256 7
	.db $0D, $8E		; play 195.99771799087466 13
	.db $07, $4A		; play 329.62755691286986 7
	.db $05, $8E		; play 195.99771799087466 5
	.db $09, $00		; play 0 9
	.db $04, $4A		; play 329.62755691286986 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $99		; play 164.813778456435 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $92		; play 184.9972113558172 5
	.db $08, $00		; play 0 8
	.db $05, $4A		; play 329.62755691286986 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $92		; play 184.9972113558172 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $03, $EC		; play 73.41619197935188 3
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $0D, $4A		; play 329.62755691286986 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $C6		; play 97.99885899543733 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $8E		; play 195.99771799087466 13
	.db $06, $4A		; play 329.62755691286986 6
	.db $01, $00		; play 0 1
	.db $04, $8E		; play 195.99771799087466 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $4A		; play 329.62755691286986 5
	.db $09, $00		; play 0 9
	.db $04, $92		; play 184.9972113558172 4
	.db $09, $00		; play 0 9
	.db $04, $4A		; play 329.62755691286986 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $EC		; play 73.41619197935188 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $92		; play 184.9972113558172 5
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $02, $EC		; play 73.41619197935188 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $92		; play 184.9972113558172 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $DC		; play 82.4068892282175 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $4A		; play 329.62755691286986 13
	.db $0D, $96		; play 174.61411571650194 13
	.db $05, $57		; play 293.66476791740763 5
	.db $02, $00		; play 0 2
	.db $05, $96		; play 174.61411571650194 5
	.db $09, $00		; play 0 9
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $A1		; play 146.83238395870376 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $99		; play 164.813778456435 5
	.db $09, $00		; play 0 9
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $09, $FE		; play 65.40639132514966 9
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $03, $FE		; play 65.40639132514966 3
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $99		; play 164.813778456435 13
	.db $0D, $57		; play 293.66476791740763 13
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $D4		; play 87.30705785825097 1
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $0D, $96		; play 174.61411571650194 13
	.db $04, $57		; play 293.66476791740763 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $BA		; play 110.0 1
	.db $02, $00		; play 0 2
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $04, $96		; play 174.61411571650194 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $B5		; play 116.54094037952248 1
	.db $08, $00		; play 0 8
	.db $EC, $3B, $74		; cycle  9 7 -9 -7
	.db $05, $57		; play 293.66476791740763 5
	.db $09, $00		; play 0 9
	.db $04, $99		; play 164.813778456435 4
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $01, $AA		; play 130.8127826502993 1
	.db $08, $00		; play 0 8
	.db $14, $D4		; play 87.30705785825097 20
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $01, $45		; play 349.22823143300394 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $C6		; play 97.99885899543733 13
	.db $0D, $AA		; play 130.8127826502993 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $7C		; play 220.0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $05, $C6		; play 97.99885899543733 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $7C		; play 220.0 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $7C		; play 220.0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $8E		; play 195.99771799087466 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $08, $7C		; play 220.0 8
	.db $01, $00		; play 0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $96		; play 174.61411571650194 4
	.db $02, $00		; play 0 2
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $8E		; play 195.99771799087466 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $AA		; play 130.8127826502993 20
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $05, $C6		; play 97.99885899543733 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $8E		; play 195.99771799087466 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $16, $8E		; play 195.99771799087466 22
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $01, $00		; play 0 1
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $96		; play 174.61411571650194 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $15, $AA		; play 130.8127826502993 21
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $7C		; play 220.0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $05, $C6		; play 97.99885899543733 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $7C		; play 220.0 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $7C		; play 220.0 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $8E		; play 195.99771799087466 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $08, $7C		; play 220.0 8
	.db $01, $00		; play 0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $96		; play 174.61411571650194 4
	.db $02, $00		; play 0 2
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $8E		; play 195.99771799087466 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $AA		; play 130.8127826502993 20
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $8E		; play 195.99771799087466 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $05, $C6		; play 97.99885899543733 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $8E		; play 195.99771799087466 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $16, $8E		; play 195.99771799087466 22
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $01, $00		; play 0 1
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $08, $96		; play 174.61411571650194 8
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $13, $AA		; play 130.8127826502993 19
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $96		; play 174.61411571650194 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $D4		; play 87.30705785825097 13
	.db $0D, $D4		; play 87.30705785825097 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $B5		; play 116.54094037952248 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $C6		; play 97.99885899543733 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $07, $B5		; play 116.54094037952248 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $96		; play 174.61411571650194 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $99		; play 164.813778456435 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $C0		; play 103.82617439498628 20
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $0E, $B5		; play 116.54094037952248 14
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $AF		; play 123.470825314031 13
	.db $0D, $AA		; play 130.8127826502993 13
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $B5		; play 116.54094037952248 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $02, $B5		; play 116.54094037952248 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AA		; play 130.8127826502993 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $B5		; play 116.54094037952248 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AA		; play 130.8127826502993 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $37, $B5		; play 116.54094037952248 55
	.db $01, $AA		; play 130.8127826502993 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0C, $BA		; play 110.0 12
	.db $07, $AA		; play 130.8127826502993 7
	.db $05, $8E		; play 195.99771799087466 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $96		; play 174.61411571650194 4
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $BA		; play 110.0 5
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $09, $AA		; play 130.8127826502993 9
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $13, $BA		; play 110.0 19
	.db $EA, $00, $C8		; cycle  4 0 -4 0
	.db $01, $AA		; play 130.8127826502993 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $0D, $BA		; play 110.0 13
	.db $0D, $BA		; play 110.0 13
	.db $01, $00		; play 0 1
	.db $0D, $C0		; play 103.82617439498628 13
	.db $04, $9D		; play 155.56349186104046 4
	.db $03, $00		; play 0 3
	.db $04, $74		; play 233.0818807590449 4
	.db $09, $00		; play 0 9
	.db $05, $5D		; play 277.1826309768721 5
	.db $09, $00		; play 0 9
	.db $04, $64		; play 261.6255653005986 4
	.db $09, $00		; play 0 9
	.db $14, $9D		; play 155.56349186104046 20
	.db $0D, $AA		; play 130.8127826502993 13
	.db $01, $00		; play 0 1
	.db $0D, $B5		; play 116.54094037952248 13
	.db $14, $C6		; play 97.99885899543733 20
	.db $05, $C6		; play 97.99885899543733 5
	.db $02, $00		; play 0 2
	.db $04, $C6		; play 97.99885899543733 4
	.db $03, $00		; play 0 3
	.db $04, $C6		; play 97.99885899543733 4
	.db $09, $00		; play 0 9
	.db $05, $C6		; play 97.99885899543733 5
	.db $02, $00		; play 0 2
	.db $11, $C6		; play 97.99885899543733 17
	.db $01, $00		; play 0 1
	.db $11, $C0		; play 103.82617439498628 17
	.db $01, $00		; play 0 1
	.db $11, $BA		; play 110.0 17
	.db $01, $00		; play 0 1
	.db $13, $B5		; play 116.54094037952248 19
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $01, $45		; play 349.22823143300394 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $B5		; play 116.54094037952248 4
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $02, $45		; play 349.22823143300394 2
	.db $01, $00		; play 0 1
	.db $06, $45		; play 349.22823143300394 6
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $B5		; play 116.54094037952248 20
	.db $05, $AF		; play 123.470825314031 5
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $02, $45		; play 349.22823143300394 2
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $05, $AF		; play 123.470825314031 5
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $08, $45		; play 349.22823143300394 8
	.db $01, $00		; play 0 1
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $04, $AF		; play 123.470825314031 4
	.db $E8, $04, $08		; cycle  0 0 0 0
	.db $02, $45		; play 349.22823143300394 2
	.db $07, $45		; play 349.22823143300394 7
	.db $E8, $FB, $F8		; cycle  1 -1 -1 1
	.db $14, $DC		; play 82.4068892282175 20
	.db $F4, (mario_right / 256 % 64) + audio_basePtr, mario_right% 256		; jump mario_right
; }


.org $-4000h
	
pageTwoEnd:
pageTwoSize	.equ	pageTwoEnd-$4000
.echo "Audio & Perspective Floor Page"
.echo "Page 2 Size: ", pageTwoSize, " bytes"
.echo (100*pageTwoSize/16384), "%\n"

.block $4000-pageTwoSize
.org $4000

.db $C9	; Page cannot begin with $FF, $80, or $00 (well, it can, but it probobally shouldn't)
	
marioSprite	.equ	$+4000h	; Mask then Sprite (interleaved)	; 3168 bytes {
	
	.db $18, $18	; Width & Height
	.db $0C, $10	; xOff & yOff
	
	; Sprite 1
	.db %11111111, %00000000, %10000011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01000100, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01000100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11101110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10000010, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %00101001, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11000111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %01111100, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01000100, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01101100, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %10111010, %01111111, %00000000
	.db %11111000, %00000011, %00000000, %00111001, %00111111, %10000000
	.db %11111000, %00000010, %00000000, %11101110, %00011111, %01000000
	.db %11110000, %00000100, %00000000, %10101010, %00011111, %01000000
	.db %11110000, %00000111, %00000000, %11101111, %00011111, %11000000
	.db %11110000, %00000111, %00000000, %10001011, %00011111, %11000000
	.db %11110000, %00000111, %00000000, %11001011, %00011111, %11000000
	.db %11110000, %00000100, %00000000, %11000111, %00001111, %00100000
	.db %11110000, %00000111, %00000000, %11111011, %00001111, %11100000
	.db %11110000, %00000111, %00000000, %00111101, %00011111, %11000000
	.db %11111000, %00000000, %11000010, %00000000, %00111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 2
	.db %11111111, %00000000, %10000011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01001100, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01000100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11011110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10000110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %00110110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %11001001, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %01111110, %11111111, %00000000
	.db %11111111, %00000000, %00000001, %01001000, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11101110, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %11100010, %11111111, %00000000
	.db %11111000, %00000011, %00000000, %01110010, %00111111, %00000000
	.db %11111000, %00000011, %00000000, %11011111, %00011111, %11000000
	.db %11110000, %00000110, %00000000, %11011110, %00001111, %01100000
	.db %11110000, %00000011, %00000000, %11110111, %00001111, %11100000
	.db %11100000, %00001110, %00000000, %01011111, %00011111, %11000000
	.db %11000000, %00010011, %00000000, %00111111, %00011111, %11000000
	.db %11000000, %00011111, %00000000, %00011100, %00111111, %10000000
	.db %11000000, %00011101, %00000000, %11111111, %00111111, %10000000
	.db %11100010, %00000000, %00000000, %11110111, %00111111, %10000000
	.db %11111111, %00000000, %00001000, %00000000, %01111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 3
	.db %11111111, %00000000, %11000011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %10000001, %00100100, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01000010, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11101110, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01000110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10010111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %10001001, %01111111, %00000000
	.db %11111111, %00000000, %00000000, %01111010, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01000100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %01101101, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11100111, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11100011, %00011111, %00000000
	.db %11111100, %00000001, %00000000, %10111111, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %11111111, %00000111, %00110000
	.db %11100000, %00000011, %00000000, %11011111, %00000111, %11110000
	.db %11000000, %00011111, %00000000, %00111111, %00000111, %11110000
	.db %10000000, %00100111, %00000000, %00111111, %00001111, %11100000
	.db %10000000, %00111010, %00000000, %00000011, %00011111, %00000000
	.db %10000000, %00111111, %00000000, %11010011, %01111111, %00000000
	.db %11000000, %00000000, %00000000, %01101110, %11111111, %00000000
	.db %11111111, %00000000, %10000000, %00001110, %11111111, %00000000
	.db %11111111, %00000000, %11100011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 4
	.db %11111111, %00000000, %11100001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00011110, %11111111, %00000000
	.db %11111111, %00000000, %10000000, %00100011, %01111111, %00000000
	.db %11111111, %00000000, %00000000, %01101111, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00100011, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00111011, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %01001010, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %01111011, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00100110, %00111111, %00000000
	.db %11111110, %00000000, %00000000, %01101110, %00011111, %01000000
	.db %11111100, %00000001, %00000000, %11100001, %00011111, %11000000
	.db %11111100, %00000001, %00000000, %11100011, %00001111, %01000000
	.db %11111000, %00000011, %00000000, %10101111, %00000111, %11110000
	.db %11100000, %00000111, %00000000, %00111111, %00000011, %10011000
	.db %11000000, %00011111, %00000000, %11111111, %00000011, %10011000
	.db %10000000, %00100011, %00000000, %01111111, %00000011, %11101000
	.db %10000000, %00100100, %00000000, %11111111, %00000111, %11110000
	.db %10000000, %00111111, %00000000, %11010110, %00001111, %00000000
	.db %11000000, %00000111, %00000001, %11100100, %11111111, %00000000
	.db %11111000, %00000000, %00000001, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %11000011, %00011000, %11111111, %00000000
	.db %11111111, %00000000, %11001111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 5
	.db %11111111, %00000000, %11100001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00011110, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00010001, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00101111, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00100111, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00110011, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %01001010, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00111011, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00100110, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %01101111, %00011111, %00000000
	.db %11111100, %00000001, %00000000, %11000111, %00001111, %01100000
	.db %11111000, %00000001, %00000000, %11000111, %00011111, %01000000
	.db %11110000, %00000111, %00000000, %01111111, %00001111, %01100000
	.db %11100000, %00000110, %00000000, %11111110, %00000111, %11110000
	.db %11000000, %00011011, %00000000, %01111111, %00000011, %10011000
	.db %10000000, %00101000, %00000000, %11110111, %00000011, %11101000
	.db %10000000, %00111000, %00000000, %11111101, %00000011, %11111000
	.db %11000000, %00011111, %00000000, %01001111, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %11011000, %00000111, %00000000
	.db %11110000, %00000000, %00000011, %01101000, %11111111, %00000000
	.db %11111111, %00000000, %10000111, %00110000, %11111111, %00000000
	.db %11111111, %00000000, %10011111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 6
	.db %11111111, %00000000, %11100001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00011110, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00010101, %01111111, %00000000
	.db %11111111, %00000000, %11000000, %00011111, %01111111, %00000000
	.db %11111111, %00000000, %11000000, %00010111, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00110001, %00011111, %11000000
	.db %11111111, %00000000, %00000000, %01001010, %00011111, %01000000
	.db %11111111, %00000000, %10000000, %00111010, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %00010011, %00111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %00001111, %01000000
	.db %11111100, %00000001, %00000000, %10001111, %00000111, %10110000
	.db %11111000, %00000001, %00000000, %00000111, %00000111, %11010000
	.db %11110000, %00000111, %00000000, %10011111, %00000111, %01110000
	.db %11100000, %00000110, %00000000, %11111111, %00000111, %01110000
	.db %11000000, %00011111, %00000000, %11111111, %00000111, %11010000
	.db %11000000, %00011111, %00000000, %11101111, %00000011, %11101000
	.db %11000000, %00010111, %00000000, %11111111, %00000011, %11101000
	.db %11000000, %00011111, %00000000, %00101111, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %00110000, %00000111, %01110000
	.db %11110000, %00000001, %00001111, %10100000, %10001111, %00000000
	.db %11111110, %00000000, %00001111, %11100000, %11111111, %00000000
	.db %11111110, %00000000, %00111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 7
	.db %11111111, %00000000, %11110001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11100000, %00001110, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00010101, %01111111, %00000000
	.db %11111111, %00000000, %11000000, %00011111, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00010111, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %01110011, %00011111, %11000000
	.db %11111111, %00000000, %00000000, %01010010, %00011111, %01000000
	.db %11111111, %00000000, %10000000, %00110010, %00111111, %10000000
	.db %11111111, %00000000, %00000000, %00010111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %10111111, %00000000
	.db %11111100, %00000001, %00000000, %10010101, %00001111, %01000000
	.db %11111000, %00000001, %00000000, %00001110, %00000111, %11010000
	.db %11110000, %00000111, %00000000, %11111111, %00000111, %00110000
	.db %11100000, %00001111, %00000000, %11111111, %00000011, %00111000
	.db %11000000, %00011011, %00000000, %11111111, %00000111, %10010000
	.db %10000000, %00110111, %00000000, %11101111, %00000011, %10101000
	.db %10000000, %00111011, %00000000, %11111111, %00000011, %11001000
	.db %11000000, %00011100, %00000000, %11111111, %00000011, %11101000
	.db %11000000, %00011111, %00000000, %01000000, %00000111, %01110000
	.db %11100000, %00000011, %00011111, %01000000, %10001111, %00000000
	.db %11111100, %00000001, %00111111, %10000000, %11111111, %00000000
	.db %11111100, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 8
	.db %11111111, %00000000, %11111000, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11110000, %00000111, %01111111, %00000000
	.db %11111111, %00000000, %11100000, %00001101, %01111111, %00000000
	.db %11111111, %00000000, %11000000, %00011111, %00111111, %10000000
	.db %11111111, %00000000, %11000000, %00001111, %00011111, %11000000
	.db %11111111, %00000000, %10000000, %00110001, %00001111, %11100000
	.db %11111111, %00000000, %00000000, %01101011, %00001111, %01100000
	.db %11111111, %00000000, %10000000, %00010010, %00011111, %10000000
	.db %11111111, %00000000, %00000000, %00010011, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111111, %01001111, %00000000
	.db %11111100, %00000000, %00000000, %10000001, %00000111, %00110000
	.db %11111000, %00000010, %00000000, %10001111, %00000011, %10111000
	.db %11110000, %00000101, %00000000, %11111111, %00000011, %11001000
	.db %11100000, %00000111, %00000000, %11111111, %00000011, %00011000
	.db %11000000, %00011011, %00000000, %11111111, %00000011, %11111000
	.db %10000000, %00100111, %00000000, %11001011, %00000011, %10101000
	.db %10000000, %00110101, %00000000, %10111111, %00000011, %11001000
	.db %11000000, %00011111, %00000000, %11111110, %00000011, %11001000
	.db %11100000, %00000100, %00000000, %10000000, %00000111, %11110000
	.db %11110000, %00000111, %00111111, %10000000, %00001111, %00000000
	.db %11111000, %00000010, %01111111, %00000000, %11111111, %00000000
	.db %11111011, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 9
	.db %11111111, %00000000, %11111000, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11110000, %00000111, %01111111, %00000000
	.db %11111111, %00000000, %11100000, %00001001, %01111111, %00000000
	.db %11111111, %00000000, %11000000, %00011001, %00111111, %10000000
	.db %11111111, %00000000, %11000000, %00001101, %00011111, %11000000
	.db %11111111, %00000000, %10000000, %00111011, %00001111, %11100000
	.db %11111111, %00000000, %00000000, %01100010, %00001111, %01100000
	.db %11111111, %00000000, %10000000, %00010010, %00011111, %01000000
	.db %11111111, %00000000, %00000000, %00001001, %00111111, %10000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111100, %00000000, %00000000, %10011011, %00100111, %00000000
	.db %11111000, %00000011, %00000000, %00011111, %00000011, %11011000
	.db %11100000, %00000111, %00000000, %11111111, %00000011, %10111000
	.db %11000000, %00011111, %00000000, %11111111, %00000011, %00011000
	.db %11000000, %00011111, %00000000, %11111111, %00000011, %11111000
	.db %11000000, %00010111, %00000000, %11100111, %00000011, %00111000
	.db %11000000, %00011001, %00000000, %10111101, %00000011, %11111000
	.db %11000000, %00011111, %00000000, %11111011, %00000111, %10010000
	.db %11100000, %00001011, %00000000, %00001101, %00000111, %10110000
	.db %11110000, %00000110, %11110010, %00000000, %00001111, %11100000
	.db %11111001, %00000000, %11111111, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 10
	.db %11111111, %00000000, %11111001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11110000, %00000110, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00001011, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00111001, %00111111, %10000000
	.db %11111111, %00000000, %11000000, %00010001, %00011111, %11000000
	.db %11111111, %00000000, %10000000, %00110110, %00001111, %11100000
	.db %11111111, %00000000, %00000000, %01100111, %00001111, %11100000
	.db %11111111, %00000000, %10000000, %00010100, %00011111, %11000000
	.db %11111111, %00000000, %00000000, %00010001, %00111111, %10000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111100, %00000000, %00000000, %10111011, %01100111, %00000000
	.db %11111000, %00000011, %00000000, %00100111, %00000011, %10011000
	.db %11100000, %00000111, %00000000, %11111111, %00000011, %01101000
	.db %11000000, %00011111, %00000000, %11111111, %00000011, %00001000
	.db %11000000, %00011111, %00000000, %01111111, %00000011, %00111000
	.db %11000000, %00011110, %00000000, %11111110, %00000011, %01101000
	.db %11000000, %00011111, %00000000, %10111111, %00000111, %10110000
	.db %11000000, %00010010, %00000000, %11111110, %00000111, %01110000
	.db %11100000, %00001110, %00000000, %00111110, %00001111, %01100000
	.db %11110001, %00000000, %11000000, %00000011, %00011111, %11000000
	.db %11111111, %00000000, %11111100, %00000000, %00111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 11
	.db %11111111, %00000000, %11110001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000000, %00001110, %11111111, %00000000
	.db %11111111, %00000000, %10000000, %00110011, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00110011, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00011011, %00011111, %11000000
	.db %11111111, %00000000, %00000000, %01111101, %00001111, %01100000
	.db %11111111, %00000000, %00000000, %01000111, %00001111, %01100000
	.db %11111111, %00000000, %10000000, %00111101, %00011111, %11000000
	.db %11111111, %00000000, %00000000, %01110011, %00111111, %10000000
	.db %11111110, %00000000, %00000000, %10011011, %01111111, %00000000
	.db %11111000, %00000001, %00000000, %00110111, %00000111, %10000000
	.db %11110000, %00000111, %00000000, %10111111, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %11111111, %00000011, %00001000
	.db %11000000, %00011111, %00000000, %11111111, %00000011, %00111000
	.db %11000000, %00011111, %00000000, %01111111, %00000011, %11111000
	.db %11000000, %00011011, %00000000, %11111100, %00000111, %10110000
	.db %11000000, %00010111, %00000000, %11111111, %00000111, %01110000
	.db %11000000, %00011100, %00000000, %01111101, %00001111, %11100000
	.db %11100011, %00000000, %10000000, %00011001, %00011111, %10000000
	.db %11111111, %00000000, %11100000, %00000111, %00111111, %10000000
	.db %11111111, %00000000, %11111000, %00000000, %01111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 12
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %10000011, %00111000, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01001100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11000111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11101111, %00111111, %10000000
	.db %11111110, %00000000, %00000000, %11111001, %00111111, %10000000
	.db %11111110, %00000000, %00000000, %10011011, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11110111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11011110, %11111111, %00000000
	.db %11111000, %00000000, %00000000, %10111110, %01111111, %00000000
	.db %11110000, %00000111, %00000000, %00101111, %00000111, %10000000
	.db %11110000, %00000111, %00000000, %11111111, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %11111111, %00000011, %00111000
	.db %11100000, %00001111, %00000000, %01111110, %00000011, %01011000
	.db %11000000, %00011010, %00000000, %11111110, %00000011, %11101000
	.db %11000000, %00010101, %00000000, %11111001, %00000111, %10010000
	.db %11000000, %00011100, %00000000, %11110111, %00001111, %11100000
	.db %11100011, %00000000, %00000000, %00100111, %00011111, %11000000
	.db %11111111, %00000000, %11000000, %00011111, %00111111, %00000000
	.db %11111111, %00000000, %11100000, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 13
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %00001111, %00000000, %11111111, %00000000
	.db %11111110, %00000000, %00000011, %11110000, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %00111100, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %00111110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %10011111, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11010011, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11100110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10111110, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %10101110, %11111111, %00000000
	.db %11111000, %00000011, %00000000, %00111111, %01111111, %00000000
	.db %11111000, %00000011, %00000000, %11011011, %00000111, %10000000
	.db %11110000, %00000111, %00000000, %11111111, %00000011, %10111000
	.db %11100000, %00001111, %00000000, %01111100, %00000011, %01111000
	.db %11000000, %00011110, %00000000, %11111101, %00000001, %10110100
	.db %11000000, %00010111, %00000000, %11110111, %00000011, %11111000
	.db %11000000, %00011101, %00000000, %01100110, %00000011, %10111000
	.db %11100010, %00000000, %00000000, %11111111, %00000111, %10000000
	.db %11111111, %00000000, %00000000, %01011101, %01111111, %00000000
	.db %11111111, %00000000, %10000000, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %11000011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 14
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111110, %00000000, %00001111, %00000000, %11111111, %00000000
	.db %11111100, %00000001, %00000111, %11110000, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %00111000, %11111111, %00000000
	.db %11111000, %00000011, %00000000, %00001110, %11111111, %00000000
	.db %11111000, %00000011, %00000000, %10010110, %11111111, %00000000
	.db %11111000, %00000011, %00000000, %11100110, %11111111, %00000000
	.db %11111000, %00000011, %00000001, %11101100, %11111111, %00000000
	.db %11111100, %00000000, %00000001, %11111100, %11111111, %00000000
	.db %11111110, %00000000, %00000001, %10111100, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %10111110, %01111111, %00000000
	.db %11111000, %00000011, %00000000, %01111111, %00001111, %10000000
	.db %11100000, %00000011, %00000000, %11111111, %00000111, %10110000
	.db %11000000, %00011110, %00000000, %11111000, %00000011, %11011000
	.db %11000000, %00010011, %00000000, %11111110, %00000001, %11100100
	.db %11000000, %00011111, %00000000, %11001110, %00000001, %00111100
	.db %11100000, %00001001, %00000000, %01001011, %00000011, %11111000
	.db %11110100, %00000001, %00000000, %01111111, %00000011, %00111000
	.db %11111110, %00000000, %00000000, %11111110, %11000111, %00000000
	.db %11111110, %00000000, %00000001, %11110000, %11111111, %00000000
	.db %11111111, %00000000, %00001111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 15
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111110, %00000000, %00011111, %00000000, %11111111, %00000000
	.db %11111100, %00000001, %00000111, %11100000, %11111111, %00000000
	.db %11111000, %00000010, %00000011, %00011000, %11111111, %00000000
	.db %11110000, %00000110, %00000001, %00011100, %11111111, %00000000
	.db %11110000, %00000111, %00000001, %11101100, %11111111, %00000000
	.db %11110000, %00000111, %00000001, %11011100, %11111111, %00000000
	.db %11111000, %00000011, %00000001, %11111100, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %11111100, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %11111110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %01111100, %11111111, %00000000
	.db %11110000, %00000001, %00000000, %11111111, %00111111, %00000000
	.db %11100000, %00001101, %00000000, %11111111, %00001111, %11000000
	.db %11000000, %00011010, %00000000, %11110101, %00000111, %10110000
	.db %11000000, %00010111, %00000000, %11111100, %00000011, %11001000
	.db %11100000, %00001111, %00000000, %11111000, %00000011, %11011000
	.db %11110000, %00000011, %00000000, %00110111, %00000011, %11111000
	.db %11111000, %00000011, %00000000, %11110111, %00000111, %11110000
	.db %11111000, %00000011, %00000000, %11101000, %00001111, %00000000
	.db %11111100, %00000001, %00010111, %11000000, %11111111, %00000000
	.db %11111110, %00000000, %00111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 16
	.db %11111111, %00000000, %00001111, %00000000, %11111111, %00000000
	.db %11111110, %00000000, %00000111, %11110000, %11111111, %00000000
	.db %11111100, %00000001, %00000011, %10011000, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %10001100, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %10001100, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %10100110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %11111110, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %11111100, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %01111100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111100, %11111111, %00000000
	.db %11111000, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11110000, %00000110, %00000000, %11111111, %00011111, %00000000
	.db %11100000, %00001101, %00000000, %10111101, %00001111, %11100000
	.db %11100000, %00001111, %00000000, %10011100, %00000111, %10010000
	.db %11110000, %00000111, %00000000, %11000001, %00000111, %10010000
	.db %11110000, %00000100, %00000000, %01010011, %00000111, %11110000
	.db %11110000, %00000111, %00000000, %11011111, %00000111, %11110000
	.db %11110000, %00000111, %00000000, %10100001, %00001111, %11100000
	.db %11111000, %00000011, %01011110, %00000000, %00011111, %00000000
	.db %11111100, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 17
	.db %11111111, %00000000, %11000011, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %10000001, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01100110, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01000010, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11000011, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11100111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111111, %00000000, %00000000, %01111110, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01111110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %01111110, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11111111, %00111111, %10000000
	.db %11111000, %00000010, %00000000, %10111101, %00011111, %01000000
	.db %11110000, %00000111, %00000000, %01000010, %00001111, %11100000
	.db %11110000, %00000101, %00000000, %11100111, %00001111, %10100000
	.db %11100000, %00001001, %00000000, %00000000, %00000111, %10010000
	.db %11100000, %00001111, %00000000, %11111111, %00000111, %11110000
	.db %11110000, %00000111, %00000000, %01000010, %00001111, %11100000
	.db %11110000, %00000111, %00111100, %00000000, %00001111, %11100000
	.db %11111000, %00000000, %11111111, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 18
	.db %11111111, %00000000, %11001111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %10000111, %00110000, %11111111, %00000000
	.db %11111111, %00000000, %00000011, %01011000, %11111111, %00000000
	.db %11111110, %00000000, %00000001, %10001100, %11111111, %00000000
	.db %11111100, %00000001, %00000001, %10001100, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %10001110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11100111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111111, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111110, %00000000, %00000001, %11111100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111000, %00000000, %00000000, %11000110, %01111111, %00000000
	.db %11110000, %00000111, %00000000, %11111111, %00111111, %10000000
	.db %11110000, %00000110, %00000000, %10011011, %00011111, %10000000
	.db %11100000, %00001111, %00000000, %11000001, %00001111, %11100000
	.db %11000000, %00010011, %00000000, %11000111, %00001111, %00100000
	.db %11000000, %00010011, %00000000, %11111111, %00001111, %00100000
	.db %11000000, %00011111, %00000000, %11111011, %00001111, %11100000
	.db %11100000, %00001110, %00000000, %10000011, %00001111, %11100000
	.db %11110001, %00000000, %01111100, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 19
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11000111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %00000011, %00111000, %11111111, %00000000
	.db %11111110, %00000000, %00000011, %11011000, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %11011100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11001111, %01111111, %00000000
	.db %11111100, %00000000, %00000000, %11110011, %01111111, %00000000
	.db %11111000, %00000011, %00000000, %01111111, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %10101110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10001110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11111110, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %11000110, %00111111, %00000000
	.db %11111000, %00000011, %00000000, %11111111, %00011111, %11000000
	.db %11111000, %00000011, %00000000, %10110010, %00011111, %11000000
	.db %11110000, %00000111, %00000000, %00000111, %00001111, %11100000
	.db %11110000, %00000101, %00000000, %11000111, %00000111, %10010000
	.db %11110000, %00000101, %00000000, %11111111, %00000111, %10010000
	.db %11110000, %00000111, %00000000, %10111111, %00000111, %11110000
	.db %11110000, %00000111, %00000000, %10000010, %00001111, %11100000
	.db %11111000, %00000000, %01111101, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 20
	.db %11111111, %00000000, %10000111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %00000011, %01111000, %11111111, %00000000
	.db %11111110, %00000000, %00000001, %10000100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11001110, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11100010, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %10001111, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %11000110, %11111111, %00000000
	.db %11111100, %00000000, %00000001, %10111100, %11111111, %00000000
	.db %11111000, %00000011, %00000001, %11111100, %11111111, %00000000
	.db %11111000, %00000010, %00000000, %10110110, %11111111, %00000000
	.db %11111100, %00000001, %00000000, %11110001, %00111111, %00000000
	.db %11111100, %00000001, %00000000, %11111101, %00011111, %11000000
	.db %11111000, %00000010, %00000000, %01111111, %00011111, %01000000
	.db %11111000, %00000010, %00000000, %01011101, %00001111, %00100000
	.db %11111000, %00000011, %00000000, %11111111, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %11011001, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %11011011, %00001111, %11100000
	.db %11110000, %00000100, %00000000, %11100111, %00001111, %00100000
	.db %11110000, %00000111, %00000000, %11011111, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %10111100, %00001111, %11100000
	.db %11111100, %00000000, %01000011, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 21
	.db %11111111, %00000000, %11000001, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %10000000, %00111110, %11111111, %00000000
	.db %11111111, %00000000, %10000000, %00100010, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01110111, %01111111, %00000000
	.db %11111111, %00000000, %00000000, %01000001, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %10110101, %01111111, %00000000
	.db %11111100, %00000001, %00000000, %00100011, %00111111, %10000000
	.db %11111100, %00000001, %00000000, %11111110, %01111111, %00000000
	.db %11111110, %00000000, %00000001, %11111100, %11111111, %00000000
	.db %11111110, %00000000, %00000000, %11101110, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %01011010, %01111111, %00000000
	.db %11111000, %00000011, %00000000, %01111101, %00111111, %10000000
	.db %11111000, %00000010, %00000000, %11101110, %00011111, %01000000
	.db %11110000, %00000100, %00000000, %10101010, %00011111, %01000000
	.db %11110000, %00000111, %00000000, %11101111, %00011111, %11000000
	.db %11110000, %00000111, %00000000, %10001011, %00011111, %11000000
	.db %11110000, %00000111, %00000000, %11001011, %00011111, %11000000
	.db %11110000, %00000100, %00000000, %11000111, %00001111, %00100000
	.db %11110000, %00000111, %00000000, %11111011, %00001111, %11100000
	.db %11110000, %00000111, %00000000, %00111101, %00011111, %11000000
	.db %11111000, %00000000, %11000010, %00000000, %00111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	; Sprite 22
	.db %11111111, %00000000, %11111000, %00000000, %01111111, %00000000
	.db %11111111, %00000000, %11110000, %00000111, %00111111, %10000000
	.db %11111111, %00000000, %11000000, %00001000, %00011111, %01000000
	.db %11111111, %00000000, %10000000, %00101111, %00001111, %10100000
	.db %11111111, %00000000, %00000000, %01010000, %00001111, %11100000
	.db %11111111, %00000000, %00000000, %01111001, %00011111, %01000000
	.db %11111111, %00000000, %10000000, %00111001, %00011111, %01000000
	.db %11111111, %00000000, %10000000, %00111111, %00011111, %11000000
	.db %11111111, %00000000, %10000000, %00111111, %00111111, %10000000
	.db %11111111, %00000000, %10000000, %00111011, %01111111, %00000000
	.db %11111110, %00000000, %00000000, %00111111, %00111111, %00000000
	.db %11111100, %00000001, %00000000, %10111100, %00011111, %11000000
	.db %11111000, %00000010, %00000000, %01111001, %00011111, %01000000
	.db %11111000, %00000010, %00000000, %01011101, %00001111, %00100000
	.db %11111000, %00000011, %00000000, %11111111, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %11011001, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %11011011, %00001111, %11100000
	.db %11110000, %00000100, %00000000, %11100111, %00001111, %00100000
	.db %11110000, %00000111, %00000000, %11011111, %00001111, %11100000
	.db %11111000, %00000011, %00000000, %10111100, %00001111, %11100000
	.db %11111100, %00000000, %01000011, %00000000, %00011111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11111111, %00000000, %11111111, %00000000

; }
	
treeSprite 	.equ	$+4000h	; The Tree Sprite {
	
	.db $18, $20	; Width & Height
	.db $0C, $1A	; xOff & yOff
	
	.db %11111111, %00000000, %11110111, %00000000, %11111111, %00000000
	.db %11111111, %00000000, %11100011, %00001000, %11111111, %00000000
	.db %11111111, %00000000, %11000001, %00010100, %11111111, %00000000
	.db %11111111, %00000000, %10000001, %00100100, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01000010, %11111111, %00000000
	.db %11111111, %00000000, %00000000, %01010010, %11111111, %00000000
	.db %11111100, %00000000, %00000000, %10000001, %00111111, %00000000
	.db %11110000, %00000011, %00000000, %00000100, %00001111, %11000000
	.db %11100000, %00001100, %00000000, %00000000, %00000111, %01110000
	.db %11000000, %00010000, %00000000, %01001000, %00000011, %11111000
	.db %10000000, %00100010, %00000000, %00000011, %00000001, %11111100
	.db %11000000, %00010000, %00000000, %00100111, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %00011111, %00000111, %11110000
	.db %11110000, %00000000, %00000000, %11111111, %00001111, %00000000
	.db %11110000, %00000011, %00000000, %11111111, %00001111, %11000000
	.db %11100000, %00001110, %00000000, %00001111, %00000111, %11110000
	.db %11000000, %00010000, %00000000, %00100111, %00000011, %11111000
	.db %10000000, %00100001, %00000000, %00000001, %00000001, %11111100
	.db %11000000, %00010000, %00000000, %00010011, %00000011, %11111000
	.db %11100000, %00001111, %00000000, %00000111, %00000111, %11110000
	.db %11110000, %00000000, %00000000, %11111111, %00001111, %00000000
	.db %11110000, %00000001, %00000000, %11111111, %00001111, %10000000
	.db %11100000, %00001110, %00000000, %00001111, %00000111, %11110000
	.db %11000000, %00010000, %00000000, %00100111, %00000011, %11111000
	.db %10000000, %00100001, %00000000, %00000001, %00000001, %11111100
	.db %11000000, %00011000, %00000000, %00010011, %00000011, %11111000
	.db %11100000, %00000111, %00000000, %00000111, %00000111, %11100000
	.db %11111000, %00000000, %00000000, %11111111, %00011111, %00000000
	.db %11111111, %00000000, %00000000, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %10000001, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %10000001, %00111100, %11111111, %00000000
	.db %11111111, %00000000, %11000011, %00011000, %11111111, %00000000
; }
	
	
	
pageThreeEnd:
pageThreeSize	.equ	pageThreeEnd-$4000
.echo "Sprite Page 1"
.echo "Page 3 Size: ", pageThreeSize, " bytes"
.echo (100*pageThreeSize/16384), "%\n"


	
	